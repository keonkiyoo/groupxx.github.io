
Final_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001078  0000110c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001078  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  0080011c  0080011c  00001128  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007a7f  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016a6  00000000  00000000  00008f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c5  00000000  00000000  0000a63d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad4  00000000  00000000  0000ba04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c1d  00000000  00000000  0000c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004166  00000000  00000000  0000e0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0001225b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_1>
       8:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_2>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_7>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_18>
      4c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	66 02       	muls	r22, r22
      c6:	d6 02       	muls	r29, r22

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e8 e7       	ldi	r30, 0x78	; 120
      dc:	f0 e1       	ldi	r31, 0x10	; 16
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 31       	cpi	r26, 0x1C	; 28
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	ac e1       	ldi	r26, 0x1C	; 28
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a3 3d       	cpi	r26, 0xD3	; 211
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c4 e6       	ldi	r28, 0x64	; 100
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 34 08 	call	0x1068	; 0x1068 <__tablejump2__>
     10a:	c2 36       	cpi	r28, 0x62	; 98
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <main>
     114:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
void TriggerRead(int echoPin);
long PulseWidth(int echoPin);
int constantDistance = 30;


void setup() {
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
  pinMode(led, OUTPUT);
     120:	c2 e0       	ldi	r28, 0x02	; 2
     122:	d1 e0       	ldi	r29, 0x01	; 1
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	88 81       	ld	r24, Y
     128:	0e 94 ad 05 	call	0xb5a	; 0xb5a <pinMode>
  digitalWrite(led, LOW);
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	88 81       	ld	r24, Y
     130:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <digitalWrite>
}
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <_Z11TriggerReadi>:
  }
  delay(100);

}

void TriggerRead(int echoPin) {
     13a:	cf 93       	push	r28
     13c:	c8 2f       	mov	r28, r24
  pinMode(echoPin, OUTPUT);
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	0e 94 ad 05 	call	0xb5a	; 0xb5a <pinMode>
  digitalWrite(echoPin, LOW);  // Added this line
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	8c 2f       	mov	r24, r28
     148:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <digitalWrite>
  delayMicroseconds(5); // Added this line
     14c:	85 e0       	ldi	r24, 0x05	; 5
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 39 05 	call	0xa72	; 0xa72 <delayMicroseconds>
  digitalWrite(echoPin, HIGH);
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	8c 2f       	mov	r24, r28
     158:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <digitalWrite>
  delayMicroseconds(20); // Added this line
     15c:	84 e1       	ldi	r24, 0x14	; 20
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 39 05 	call	0xa72	; 0xa72 <delayMicroseconds>
  digitalWrite(echoPin, LOW);
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	8c 2f       	mov	r24, r28
     168:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <digitalWrite>
}
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <_Z10PulseWidthi>:

long PulseWidth(int echoPin) {
     170:	cf 93       	push	r28
     172:	c8 2f       	mov	r28, r24
  long duration, distance;
  TriggerRead(echoPin);
     174:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z11TriggerReadi>
  pinMode(echoPin, INPUT);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	8c 2f       	mov	r24, r28
     17c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <pinMode>
  duration = pulseIn(echoPin, HIGH);
     180:	20 e4       	ldi	r18, 0x40	; 64
     182:	32 e4       	ldi	r19, 0x42	; 66
     184:	4f e0       	ldi	r20, 0x0F	; 15
     186:	50 e0       	ldi	r21, 0x00	; 0
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	8c 2f       	mov	r24, r28
     18c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <pulseIn>
  distance = (duration / 2) / 29.1;
     190:	99 23       	and	r25, r25
     192:	24 f4       	brge	.+8      	; 0x19c <_Z10PulseWidthi+0x2c>
     194:	6f 5f       	subi	r22, 0xFF	; 255
     196:	7f 4f       	sbci	r23, 0xFF	; 255
     198:	8f 4f       	sbci	r24, 0xFF	; 255
     19a:	9f 4f       	sbci	r25, 0xFF	; 255
     19c:	95 95       	asr	r25
     19e:	87 95       	ror	r24
     1a0:	77 95       	ror	r23
     1a2:	67 95       	ror	r22
     1a4:	0e 94 86 07 	call	0xf0c	; 0xf0c <__floatsisf>
     1a8:	2d ec       	ldi	r18, 0xCD	; 205
     1aa:	3c ec       	ldi	r19, 0xCC	; 204
     1ac:	48 ee       	ldi	r20, 0xE8	; 232
     1ae:	51 e4       	ldi	r21, 0x41	; 65
     1b0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__divsf3>
     1b4:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fixsfsi>
  return distance;
}
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <loop>:
void setup() {
  pinMode(led, OUTPUT);
  digitalWrite(led, LOW);
}

void loop() {
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
 
  if (PulseWidth(8) < constantDistance || PulseWidth(10) < constantDistance || PulseWidth(11) < constantDistance) {
     1c0:	88 e0       	ldi	r24, 0x08	; 8
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 b8 00 	call	0x170	; 0x170 <_Z10PulseWidthi>
     1c8:	20 91 00 01 	lds	r18, 0x0100
     1cc:	30 91 01 01 	lds	r19, 0x0101
     1d0:	89 01       	movw	r16, r18
     1d2:	33 0f       	add	r19, r19
     1d4:	22 0b       	sbc	r18, r18
     1d6:	33 0b       	sbc	r19, r19
     1d8:	60 17       	cp	r22, r16
     1da:	71 07       	cpc	r23, r17
     1dc:	82 07       	cpc	r24, r18
     1de:	93 07       	cpc	r25, r19
     1e0:	14 f1       	brlt	.+68     	; 0x226 <loop+0x6a>
     1e2:	8a e0       	ldi	r24, 0x0A	; 10
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 b8 00 	call	0x170	; 0x170 <_Z10PulseWidthi>
     1ea:	20 91 00 01 	lds	r18, 0x0100
     1ee:	30 91 01 01 	lds	r19, 0x0101
     1f2:	89 01       	movw	r16, r18
     1f4:	33 0f       	add	r19, r19
     1f6:	22 0b       	sbc	r18, r18
     1f8:	33 0b       	sbc	r19, r19
     1fa:	60 17       	cp	r22, r16
     1fc:	71 07       	cpc	r23, r17
     1fe:	82 07       	cpc	r24, r18
     200:	93 07       	cpc	r25, r19
     202:	8c f0       	brlt	.+34     	; 0x226 <loop+0x6a>
     204:	8b e0       	ldi	r24, 0x0B	; 11
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 b8 00 	call	0x170	; 0x170 <_Z10PulseWidthi>
     20c:	20 91 00 01 	lds	r18, 0x0100
     210:	30 91 01 01 	lds	r19, 0x0101
     214:	89 01       	movw	r16, r18
     216:	33 0f       	add	r19, r19
     218:	22 0b       	sbc	r18, r18
     21a:	33 0b       	sbc	r19, r19
     21c:	60 17       	cp	r22, r16
     21e:	71 07       	cpc	r23, r17
     220:	82 07       	cpc	r24, r18
     222:	93 07       	cpc	r25, r19
     224:	34 f4       	brge	.+12     	; 0x232 <loop+0x76>
    digitalWrite(led, HIGH);
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	80 91 02 01 	lds	r24, 0x0102
     22c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <digitalWrite>
     230:	05 c0       	rjmp	.+10     	; 0x23c <loop+0x80>
  }
  else {
    digitalWrite(led, LOW);
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	80 91 02 01 	lds	r24, 0x0102
     238:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <digitalWrite>
  }
  delay(100);
     23c:	64 e6       	ldi	r22, 0x64	; 100
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 0d 05 	call	0xa1a	; 0xa1a <delay>

}
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     24e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     250:	91 8d       	ldd	r25, Z+25	; 0x19
     252:	22 8d       	ldd	r18, Z+26	; 0x1a
     254:	89 2f       	mov	r24, r25
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	80 5c       	subi	r24, 0xC0	; 192
     25a:	9f 4f       	sbci	r25, 0xFF	; 255
     25c:	82 1b       	sub	r24, r18
     25e:	91 09       	sbc	r25, r1
}
     260:	8f 73       	andi	r24, 0x3F	; 63
     262:	99 27       	eor	r25, r25
     264:	08 95       	ret

00000266 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     266:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     268:	91 8d       	ldd	r25, Z+25	; 0x19
     26a:	82 8d       	ldd	r24, Z+26	; 0x1a
     26c:	98 17       	cp	r25, r24
     26e:	31 f0       	breq	.+12     	; 0x27c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     270:	82 8d       	ldd	r24, Z+26	; 0x1a
     272:	e8 0f       	add	r30, r24
     274:	f1 1d       	adc	r31, r1
     276:	85 8d       	ldd	r24, Z+29	; 0x1d
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     280:	08 95       	ret

00000282 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     282:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     284:	91 8d       	ldd	r25, Z+25	; 0x19
     286:	82 8d       	ldd	r24, Z+26	; 0x1a
     288:	98 17       	cp	r25, r24
     28a:	61 f0       	breq	.+24     	; 0x2a4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     28c:	82 8d       	ldd	r24, Z+26	; 0x1a
     28e:	df 01       	movw	r26, r30
     290:	a8 0f       	add	r26, r24
     292:	b1 1d       	adc	r27, r1
     294:	5d 96       	adiw	r26, 0x1d	; 29
     296:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     298:	92 8d       	ldd	r25, Z+26	; 0x1a
     29a:	9f 5f       	subi	r25, 0xFF	; 255
     29c:	9f 73       	andi	r25, 0x3F	; 63
     29e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     2a8:	08 95       	ret

000002aa <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     2aa:	8c e5       	ldi	r24, 0x5C	; 92
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	89 2b       	or	r24, r25
     2b0:	49 f0       	breq	.+18     	; 0x2c4 <_Z14serialEventRunv+0x1a>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	89 2b       	or	r24, r25
     2b8:	29 f0       	breq	.+10     	; 0x2c4 <_Z14serialEventRunv+0x1a>
     2ba:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z17Serial0_availablev>
     2be:	81 11       	cpse	r24, r1
     2c0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2c4:	08 95       	ret

000002c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     2c6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     2c8:	84 8d       	ldd	r24, Z+28	; 0x1c
     2ca:	df 01       	movw	r26, r30
     2cc:	a8 0f       	add	r26, r24
     2ce:	b1 1d       	adc	r27, r1
     2d0:	a3 5a       	subi	r26, 0xA3	; 163
     2d2:	bf 4f       	sbci	r27, 0xFF	; 255
     2d4:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     2d6:	24 8d       	ldd	r18, Z+28	; 0x1c
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	2f 5f       	subi	r18, 0xFF	; 255
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	2f 73       	andi	r18, 0x3F	; 63
     2e0:	30 78       	andi	r19, 0x80	; 128
     2e2:	33 23       	and	r19, r19
     2e4:	34 f4       	brge	.+12     	; 0x2f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     2e6:	21 50       	subi	r18, 0x01	; 1
     2e8:	31 09       	sbc	r19, r1
     2ea:	20 6c       	ori	r18, 0xC0	; 192
     2ec:	3f 6f       	ori	r19, 0xFF	; 255
     2ee:	2f 5f       	subi	r18, 0xFF	; 255
     2f0:	3f 4f       	sbci	r19, 0xFF	; 255
     2f2:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     2f4:	a6 89       	ldd	r26, Z+22	; 0x16
     2f6:	b7 89       	ldd	r27, Z+23	; 0x17
     2f8:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     2fa:	a0 89       	ldd	r26, Z+16	; 0x10
     2fc:	b1 89       	ldd	r27, Z+17	; 0x11
     2fe:	8c 91       	ld	r24, X
     300:	80 64       	ori	r24, 0x40	; 64
     302:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     304:	93 8d       	ldd	r25, Z+27	; 0x1b
     306:	84 8d       	ldd	r24, Z+28	; 0x1c
     308:	98 13       	cpse	r25, r24
     30a:	06 c0       	rjmp	.+12     	; 0x318 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     30c:	02 88       	ldd	r0, Z+18	; 0x12
     30e:	f3 89       	ldd	r31, Z+19	; 0x13
     310:	e0 2d       	mov	r30, r0
     312:	80 81       	ld	r24, Z
     314:	8f 7d       	andi	r24, 0xDF	; 223
     316:	80 83       	st	Z, r24
     318:	08 95       	ret

0000031a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     320:	88 8d       	ldd	r24, Y+24	; 0x18
     322:	81 11       	cpse	r24, r1
     324:	0f c0       	rjmp	.+30     	; 0x344 <_ZN14HardwareSerial5flushEv+0x2a>
     326:	18 c0       	rjmp	.+48     	; 0x358 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	07 fc       	sbrc	r0, 7
     32c:	0d c0       	rjmp	.+26     	; 0x348 <_ZN14HardwareSerial5flushEv+0x2e>
     32e:	90 81       	ld	r25, Z
     330:	95 ff       	sbrs	r25, 5
     332:	0a c0       	rjmp	.+20     	; 0x348 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     334:	a8 89       	ldd	r26, Y+16	; 0x10
     336:	b9 89       	ldd	r27, Y+17	; 0x11
     338:	8c 91       	ld	r24, X
     33a:	85 ff       	sbrs	r24, 5
     33c:	05 c0       	rjmp	.+10     	; 0x348 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     33e:	ce 01       	movw	r24, r28
     340:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     344:	ea 89       	ldd	r30, Y+18	; 0x12
     346:	fb 89       	ldd	r31, Y+19	; 0x13
     348:	90 81       	ld	r25, Z
     34a:	95 fd       	sbrc	r25, 5
     34c:	ed cf       	rjmp	.-38     	; 0x328 <_ZN14HardwareSerial5flushEv+0xe>
     34e:	a8 89       	ldd	r26, Y+16	; 0x10
     350:	b9 89       	ldd	r27, Y+17	; 0x11
     352:	8c 91       	ld	r24, X
     354:	86 ff       	sbrs	r24, 6
     356:	e8 cf       	rjmp	.-48     	; 0x328 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	fc 01       	movw	r30, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     368:	93 8d       	ldd	r25, Z+27	; 0x1b
     36a:	84 8d       	ldd	r24, Z+28	; 0x1c
     36c:	98 13       	cpse	r25, r24
     36e:	24 c0       	rjmp	.+72     	; 0x3b8 <_ZN14HardwareSerial5writeEh+0x5a>
     370:	a0 89       	ldd	r26, Z+16	; 0x10
     372:	b1 89       	ldd	r27, Z+17	; 0x11
     374:	8c 91       	ld	r24, X
     376:	85 fd       	sbrc	r24, 5
     378:	31 c0       	rjmp	.+98     	; 0x3dc <_ZN14HardwareSerial5writeEh+0x7e>
     37a:	1e c0       	rjmp	.+60     	; 0x3b8 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	07 fc       	sbrc	r0, 7
     380:	08 c0       	rjmp	.+16     	; 0x392 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     382:	e8 89       	ldd	r30, Y+16	; 0x10
     384:	f9 89       	ldd	r31, Y+17	; 0x11
     386:	80 81       	ld	r24, Z
     388:	85 ff       	sbrs	r24, 5
     38a:	03 c0       	rjmp	.+6      	; 0x392 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     38c:	ce 01       	movw	r24, r28
     38e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     392:	9c 8d       	ldd	r25, Y+28	; 0x1c
     394:	09 17       	cp	r16, r25
     396:	91 f3       	breq	.-28     	; 0x37c <_ZN14HardwareSerial5writeEh+0x1e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     398:	8b 8d       	ldd	r24, Y+27	; 0x1b
     39a:	fe 01       	movw	r30, r28
     39c:	e8 0f       	add	r30, r24
     39e:	f1 1d       	adc	r31, r1
     3a0:	e3 5a       	subi	r30, 0xA3	; 163
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     3a6:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     3a8:	ea 89       	ldd	r30, Y+18	; 0x12
     3aa:	fb 89       	ldd	r31, Y+19	; 0x13
     3ac:	80 81       	ld	r24, Z
     3ae:	80 62       	ori	r24, 0x20	; 32
     3b0:	80 83       	st	Z, r24
  _written = true;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
     3b6:	1b c0       	rjmp	.+54     	; 0x3ee <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     3b8:	23 8d       	ldd	r18, Z+27	; 0x1b
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	2f 5f       	subi	r18, 0xFF	; 255
     3be:	3f 4f       	sbci	r19, 0xFF	; 255
     3c0:	2f 73       	andi	r18, 0x3F	; 63
     3c2:	30 78       	andi	r19, 0x80	; 128
     3c4:	33 23       	and	r19, r19
     3c6:	34 f4       	brge	.+12     	; 0x3d4 <_ZN14HardwareSerial5writeEh+0x76>
     3c8:	21 50       	subi	r18, 0x01	; 1
     3ca:	31 09       	sbc	r19, r1
     3cc:	20 6c       	ori	r18, 0xC0	; 192
     3ce:	3f 6f       	ori	r19, 0xFF	; 255
     3d0:	2f 5f       	subi	r18, 0xFF	; 255
     3d2:	3f 4f       	sbci	r19, 0xFF	; 255
     3d4:	16 2f       	mov	r17, r22
     3d6:	ef 01       	movw	r28, r30
     3d8:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     3da:	db cf       	rjmp	.-74     	; 0x392 <_ZN14HardwareSerial5writeEh+0x34>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     3dc:	a6 89       	ldd	r26, Z+22	; 0x16
     3de:	b7 89       	ldd	r27, Z+23	; 0x17
     3e0:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     3e2:	00 88       	ldd	r0, Z+16	; 0x10
     3e4:	f1 89       	ldd	r31, Z+17	; 0x11
     3e6:	e0 2d       	mov	r30, r0
     3e8:	80 81       	ld	r24, Z
     3ea:	80 64       	ori	r24, 0x40	; 64
     3ec:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	2f 93       	push	r18
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
     40c:	af 93       	push	r26
     40e:	bf 93       	push	r27
     410:	ef 93       	push	r30
     412:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     414:	e0 91 2c 01 	lds	r30, 0x012C
     418:	f0 91 2d 01 	lds	r31, 0x012D
     41c:	80 81       	ld	r24, Z
     41e:	82 fd       	sbrc	r24, 2
     420:	14 c0       	rjmp	.+40     	; 0x44a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     422:	ec e1       	ldi	r30, 0x1C	; 28
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	a6 89       	ldd	r26, Z+22	; 0x16
     428:	b7 89       	ldd	r27, Z+23	; 0x17
     42a:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     42c:	81 8d       	ldd	r24, Z+25	; 0x19
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     432:	92 8d       	ldd	r25, Z+26	; 0x1a
     434:	89 17       	cp	r24, r25
     436:	71 f0       	breq	.+28     	; 0x454 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     438:	df 01       	movw	r26, r30
     43a:	e1 8d       	ldd	r30, Z+25	; 0x19
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	e4 5e       	subi	r30, 0xE4	; 228
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     444:	59 96       	adiw	r26, 0x19	; 25
     446:	8c 93       	st	X, r24
     448:	05 c0       	rjmp	.+10     	; 0x454 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     44a:	e0 91 32 01 	lds	r30, 0x0132
     44e:	f0 91 33 01 	lds	r31, 0x0133
     452:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     454:	ff 91       	pop	r31
     456:	ef 91       	pop	r30
     458:	bf 91       	pop	r27
     45a:	af 91       	pop	r26
     45c:	9f 91       	pop	r25
     45e:	8f 91       	pop	r24
     460:	2f 91       	pop	r18
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	2f 93       	push	r18
     478:	3f 93       	push	r19
     47a:	4f 93       	push	r20
     47c:	5f 93       	push	r21
     47e:	6f 93       	push	r22
     480:	7f 93       	push	r23
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	af 93       	push	r26
     488:	bf 93       	push	r27
     48a:	ef 93       	push	r30
     48c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     48e:	8c e1       	ldi	r24, 0x1C	; 28
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	bf 91       	pop	r27
     49c:	af 91       	pop	r26
     49e:	9f 91       	pop	r25
     4a0:	8f 91       	pop	r24
     4a2:	7f 91       	pop	r23
     4a4:	6f 91       	pop	r22
     4a6:	5f 91       	pop	r21
     4a8:	4f 91       	pop	r20
     4aa:	3f 91       	pop	r19
     4ac:	2f 91       	pop	r18
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     4b8:	8c e1       	ldi	r24, 0x1C	; 28
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 27 01 	call	0x24e	; 0x24e <_ZN14HardwareSerial9availableEv>
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	89 2b       	or	r24, r25
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <_Z17Serial0_availablev+0x10>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
}
     4c8:	82 2f       	mov	r24, r18
     4ca:	08 95       	ret

000004cc <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4cc:	ec e1       	ldi	r30, 0x1C	; 28
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	13 82       	std	Z+3, r1	; 0x03
     4d2:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     4d4:	88 ee       	ldi	r24, 0xE8	; 232
     4d6:	93 e0       	ldi	r25, 0x03	; 3
     4d8:	a0 e0       	ldi	r26, 0x00	; 0
     4da:	b0 e0       	ldi	r27, 0x00	; 0
     4dc:	84 83       	std	Z+4, r24	; 0x04
     4de:	95 83       	std	Z+5, r25	; 0x05
     4e0:	a6 83       	std	Z+6, r26	; 0x06
     4e2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     4e4:	89 e0       	ldi	r24, 0x09	; 9
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	91 83       	std	Z+1, r25	; 0x01
     4ea:	80 83       	st	Z, r24
     4ec:	85 ec       	ldi	r24, 0xC5	; 197
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	95 87       	std	Z+13, r25	; 0x0d
     4f2:	84 87       	std	Z+12, r24	; 0x0c
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	97 87       	std	Z+15, r25	; 0x0f
     4fa:	86 87       	std	Z+14, r24	; 0x0e
     4fc:	80 ec       	ldi	r24, 0xC0	; 192
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	91 8b       	std	Z+17, r25	; 0x11
     502:	80 8b       	std	Z+16, r24	; 0x10
     504:	81 ec       	ldi	r24, 0xC1	; 193
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	93 8b       	std	Z+19, r25	; 0x13
     50a:	82 8b       	std	Z+18, r24	; 0x12
     50c:	82 ec       	ldi	r24, 0xC2	; 194
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	95 8b       	std	Z+21, r25	; 0x15
     512:	84 8b       	std	Z+20, r24	; 0x14
     514:	86 ec       	ldi	r24, 0xC6	; 198
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	97 8b       	std	Z+23, r25	; 0x17
     51a:	86 8b       	std	Z+22, r24	; 0x16
     51c:	11 8e       	std	Z+25, r1	; 0x19
     51e:	12 8e       	std	Z+26, r1	; 0x1a
     520:	13 8e       	std	Z+27, r1	; 0x1b
     522:	14 8e       	std	Z+28, r1	; 0x1c
     524:	08 95       	ret

00000526 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     526:	08 95       	ret

00000528 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     528:	8f 92       	push	r8
     52a:	9f 92       	push	r9
     52c:	af 92       	push	r10
     52e:	bf 92       	push	r11
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	5c 01       	movw	r10, r24
     542:	7b 01       	movw	r14, r22
     544:	4c 01       	movw	r8, r24
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	88 0e       	add	r8, r24
     54a:	91 1c       	adc	r9, r1
     54c:	65 01       	movw	r12, r10
     54e:	e5 e0       	ldi	r30, 0x05	; 5
     550:	ce 0e       	add	r12, r30
     552:	d1 1c       	adc	r13, r1
    size_t n = 0;
     554:	00 e0       	ldi	r16, 0x00	; 0
     556:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     558:	f4 01       	movw	r30, r8
     55a:	61 91       	ld	r22, Z+
     55c:	4f 01       	movw	r8, r30
     55e:	4a e0       	ldi	r20, 0x0A	; 10
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	c7 01       	movw	r24, r14
     564:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN5Print5printEhi>
     568:	ec 01       	movw	r28, r24
        n += p.print('.');
     56a:	6e e2       	ldi	r22, 0x2E	; 46
     56c:	c7 01       	movw	r24, r14
     56e:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN5Print5printEc>
     572:	8c 0f       	add	r24, r28
     574:	9d 1f       	adc	r25, r29
     576:	08 0f       	add	r16, r24
     578:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     57a:	8c 14       	cp	r8, r12
     57c:	9d 04       	cpc	r9, r13
     57e:	61 f7       	brne	.-40     	; 0x558 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     580:	4a e0       	ldi	r20, 0x0A	; 10
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	f5 01       	movw	r30, r10
     586:	65 81       	ldd	r22, Z+5	; 0x05
     588:	c7 01       	movw	r24, r14
     58a:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN5Print5printEhi>
    return n;
}
     58e:	80 0f       	add	r24, r16
     590:	91 1f       	adc	r25, r17
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	bf 90       	pop	r11
     5a4:	af 90       	pop	r10
     5a6:	9f 90       	pop	r9
     5a8:	8f 90       	pop	r8
     5aa:	08 95       	ret

000005ac <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     5ac:	e9 eb       	ldi	r30, 0xB9	; 185
     5ae:	f1 e0       	ldi	r31, 0x01	; 1
     5b0:	89 e1       	ldi	r24, 0x19	; 25
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	91 83       	std	Z+1, r25	; 0x01
     5b6:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     5b8:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     5ba:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     5bc:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     5be:	15 82       	std	Z+5, r1	; 0x05
     5c0:	08 95       	ret

000005c2 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     5c2:	08 95       	ret

000005c4 <main>:

int main(void)
{
	init();
     5c4:	0e 94 43 05 	call	0xa86	; 0xa86 <init>

	initVariant();
     5c8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     5cc:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     5d0:	c5 e5       	ldi	r28, 0x55	; 85
     5d2:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     5d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <loop>
		if (serialEventRun) serialEventRun();
     5d8:	20 97       	sbiw	r28, 0x00	; 0
     5da:	e1 f3       	breq	.-8      	; 0x5d4 <main+0x10>
     5dc:	0e 94 55 01 	call	0x2aa	; 0x2aa <_Z14serialEventRunv>
     5e0:	f9 cf       	rjmp	.-14     	; 0x5d4 <main+0x10>

000005e2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     5f2:	41 15       	cp	r20, r1
     5f4:	51 05       	cpc	r21, r1
     5f6:	b1 f0       	breq	.+44     	; 0x624 <_ZN5Print5writeEPKhj+0x42>
     5f8:	8c 01       	movw	r16, r24
     5fa:	e6 2e       	mov	r14, r22
     5fc:	f7 2e       	mov	r15, r23
     5fe:	ea 01       	movw	r28, r20
     600:	c1 2c       	mov	r12, r1
     602:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
     604:	d7 01       	movw	r26, r14
     606:	6d 91       	ld	r22, X+
     608:	7d 01       	movw	r14, r26
     60a:	d8 01       	movw	r26, r16
     60c:	ed 91       	ld	r30, X+
     60e:	fc 91       	ld	r31, X
     610:	01 90       	ld	r0, Z+
     612:	f0 81       	ld	r31, Z
     614:	e0 2d       	mov	r30, r0
     616:	c8 01       	movw	r24, r16
     618:	09 95       	icall
     61a:	c8 0e       	add	r12, r24
     61c:	d9 1e       	adc	r13, r25
     61e:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     620:	89 f7       	brne	.-30     	; 0x604 <_ZN5Print5writeEPKhj+0x22>
     622:	02 c0       	rjmp	.+4      	; 0x628 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     624:	c1 2c       	mov	r12, r1
     626:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
     628:	c6 01       	movw	r24, r12
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	08 95       	ret

0000063c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     63c:	dc 01       	movw	r26, r24
     63e:	ed 91       	ld	r30, X+
     640:	fc 91       	ld	r31, X
     642:	01 90       	ld	r0, Z+
     644:	f0 81       	ld	r31, Z
     646:	e0 2d       	mov	r30, r0
     648:	09 95       	icall
}
     64a:	08 95       	ret

0000064c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     64c:	4f 92       	push	r4
     64e:	5f 92       	push	r5
     650:	6f 92       	push	r6
     652:	7f 92       	push	r7
     654:	9f 92       	push	r9
     656:	af 92       	push	r10
     658:	bf 92       	push	r11
     65a:	cf 92       	push	r12
     65c:	df 92       	push	r13
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	a1 97       	sbiw	r28, 0x21	; 33
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	5c 01       	movw	r10, r24
     67c:	6a 01       	movw	r12, r20
     67e:	7b 01       	movw	r14, r22
     680:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     682:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	82 17       	cp	r24, r18
     688:	20 f0       	brcs	.+8      	; 0x692 <_ZN5Print11printNumberEmh+0x46>
     68a:	0f 2e       	mov	r0, r31
     68c:	fa e0       	ldi	r31, 0x0A	; 10
     68e:	9f 2e       	mov	r9, r31
     690:	f0 2d       	mov	r31, r0
     692:	8e 01       	movw	r16, r28
     694:	0f 5d       	subi	r16, 0xDF	; 223
     696:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     698:	49 2c       	mov	r4, r9
     69a:	51 2c       	mov	r5, r1
     69c:	61 2c       	mov	r6, r1
     69e:	71 2c       	mov	r7, r1
     6a0:	c7 01       	movw	r24, r14
     6a2:	b6 01       	movw	r22, r12
     6a4:	a3 01       	movw	r20, r6
     6a6:	92 01       	movw	r18, r4
     6a8:	0e 94 12 08 	call	0x1024	; 0x1024 <__udivmodsi4>
    char c = m - base * n;
     6ac:	8c 2d       	mov	r24, r12
     6ae:	92 9e       	mul	r9, r18
     6b0:	80 19       	sub	r24, r0
     6b2:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6b4:	01 50       	subi	r16, 0x01	; 1
     6b6:	11 09       	sbc	r17, r1
     6b8:	8a 30       	cpi	r24, 0x0A	; 10
     6ba:	10 f4       	brcc	.+4      	; 0x6c0 <_ZN5Print11printNumberEmh+0x74>
     6bc:	80 5d       	subi	r24, 0xD0	; 208
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <_ZN5Print11printNumberEmh+0x76>
     6c0:	89 5c       	subi	r24, 0xC9	; 201
     6c2:	d8 01       	movw	r26, r16
     6c4:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     6c6:	c2 2e       	mov	r12, r18
     6c8:	d3 2e       	mov	r13, r19
     6ca:	e4 2e       	mov	r14, r20
     6cc:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     6ce:	c1 14       	cp	r12, r1
     6d0:	d1 04       	cpc	r13, r1
     6d2:	e1 04       	cpc	r14, r1
     6d4:	f1 04       	cpc	r15, r1
     6d6:	21 f7       	brne	.-56     	; 0x6a0 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     6d8:	01 15       	cp	r16, r1
     6da:	11 05       	cpc	r17, r1
     6dc:	91 f0       	breq	.+36     	; 0x702 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
     6de:	f8 01       	movw	r30, r16
     6e0:	01 90       	ld	r0, Z+
     6e2:	00 20       	and	r0, r0
     6e4:	e9 f7       	brne	.-6      	; 0x6e0 <_ZN5Print11printNumberEmh+0x94>
     6e6:	31 97       	sbiw	r30, 0x01	; 1
     6e8:	af 01       	movw	r20, r30
     6ea:	40 1b       	sub	r20, r16
     6ec:	51 0b       	sbc	r21, r17
     6ee:	d5 01       	movw	r26, r10
     6f0:	ed 91       	ld	r30, X+
     6f2:	fc 91       	ld	r31, X
     6f4:	02 80       	ldd	r0, Z+2	; 0x02
     6f6:	f3 81       	ldd	r31, Z+3	; 0x03
     6f8:	e0 2d       	mov	r30, r0
     6fa:	b8 01       	movw	r22, r16
     6fc:	c5 01       	movw	r24, r10
     6fe:	09 95       	icall
     700:	02 c0       	rjmp	.+4      	; 0x706 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
     706:	a1 96       	adiw	r28, 0x21	; 33
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f be       	out	0x3f, r0	; 63
     710:	cd bf       	out	0x3d, r28	; 61
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	df 90       	pop	r13
     720:	cf 90       	pop	r12
     722:	bf 90       	pop	r11
     724:	af 90       	pop	r10
     726:	9f 90       	pop	r9
     728:	7f 90       	pop	r7
     72a:	6f 90       	pop	r6
     72c:	5f 90       	pop	r5
     72e:	4f 90       	pop	r4
     730:	08 95       	ret

00000732 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     732:	21 15       	cp	r18, r1
     734:	31 05       	cpc	r19, r1
     736:	49 f4       	brne	.+18     	; 0x74a <_ZN5Print5printEmi+0x18>
     738:	dc 01       	movw	r26, r24
     73a:	ed 91       	ld	r30, X+
     73c:	fc 91       	ld	r31, X
     73e:	01 90       	ld	r0, Z+
     740:	f0 81       	ld	r31, Z
     742:	e0 2d       	mov	r30, r0
     744:	64 2f       	mov	r22, r20
     746:	09 95       	icall
     748:	08 95       	ret
  else return printNumber(n, base);
     74a:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print11printNumberEmh>
}
     74e:	08 95       	ret

00000750 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     750:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     752:	46 2f       	mov	r20, r22
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	0e 94 99 03 	call	0x732	; 0x732 <_ZN5Print5printEmi>
}
     75e:	08 95       	ret

00000760 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	39 f0       	breq	.+14     	; 0x772 <_Z12disableTimerh+0x12>
     764:	18 f0       	brcs	.+6      	; 0x76c <_Z12disableTimerh+0xc>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	51 f0       	breq	.+20     	; 0x77e <_Z12disableTimerh+0x1e>
     76a:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     76c:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     770:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     772:	ef e6       	ldi	r30, 0x6F	; 111
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	8d 7f       	andi	r24, 0xFD	; 253
     77a:	80 83       	st	Z, r24
      break;
     77c:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     77e:	e0 e7       	ldi	r30, 0x70	; 112
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	8d 7f       	andi	r24, 0xFD	; 253
     786:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     78e:	e1 eb       	ldi	r30, 0xB1	; 177
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	88 7f       	andi	r24, 0xF8	; 248
     796:	84 60       	ori	r24, 0x04	; 4
     798:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     79a:	10 92 b3 00 	sts	0x00B3, r1
     79e:	08 95       	ret

000007a0 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7a0:	cf 93       	push	r28
     7a2:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7a4:	80 91 04 01 	lds	r24, 0x0104
     7a8:	8c 13       	cpse	r24, r28
     7aa:	08 c0       	rjmp	.+16     	; 0x7bc <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7ac:	e8 e6       	ldi	r30, 0x68	; 104
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	e4 91       	lpm	r30, Z
     7b2:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
     7b4:	9f ef       	ldi	r25, 0xFF	; 255
     7b6:	90 93 04 01 	sts	0x0104, r25
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <_Z6noToneh+0x1e>
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
     7be:	0e 94 b0 03 	call	0x760	; 0x760 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	8c 2f       	mov	r24, r28
     7c6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <digitalWrite>
}
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	2f 93       	push	r18
     7da:	3f 93       	push	r19
     7dc:	4f 93       	push	r20
     7de:	5f 93       	push	r21
     7e0:	6f 93       	push	r22
     7e2:	7f 93       	push	r23
     7e4:	8f 93       	push	r24
     7e6:	9f 93       	push	r25
     7e8:	af 93       	push	r26
     7ea:	bf 93       	push	r27
     7ec:	ef 93       	push	r30
     7ee:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     7f0:	80 91 c2 01 	lds	r24, 0x01C2
     7f4:	90 91 c3 01 	lds	r25, 0x01C3
     7f8:	a0 91 c4 01 	lds	r26, 0x01C4
     7fc:	b0 91 c5 01 	lds	r27, 0x01C5
     800:	89 2b       	or	r24, r25
     802:	8a 2b       	or	r24, r26
     804:	8b 2b       	or	r24, r27
     806:	51 f1       	breq	.+84     	; 0x85c <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     808:	80 91 bf 01 	lds	r24, 0x01BF
     80c:	e0 91 c0 01 	lds	r30, 0x01C0
     810:	f0 91 c1 01 	lds	r31, 0x01C1
     814:	90 81       	ld	r25, Z
     816:	89 27       	eor	r24, r25
     818:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     81a:	80 91 c2 01 	lds	r24, 0x01C2
     81e:	90 91 c3 01 	lds	r25, 0x01C3
     822:	a0 91 c4 01 	lds	r26, 0x01C4
     826:	b0 91 c5 01 	lds	r27, 0x01C5
     82a:	18 16       	cp	r1, r24
     82c:	19 06       	cpc	r1, r25
     82e:	1a 06       	cpc	r1, r26
     830:	1b 06       	cpc	r1, r27
     832:	c4 f4       	brge	.+48     	; 0x864 <__vector_7+0x96>
      timer2_toggle_count--;
     834:	80 91 c2 01 	lds	r24, 0x01C2
     838:	90 91 c3 01 	lds	r25, 0x01C3
     83c:	a0 91 c4 01 	lds	r26, 0x01C4
     840:	b0 91 c5 01 	lds	r27, 0x01C5
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	a1 09       	sbc	r26, r1
     848:	b1 09       	sbc	r27, r1
     84a:	80 93 c2 01 	sts	0x01C2, r24
     84e:	90 93 c3 01 	sts	0x01C3, r25
     852:	a0 93 c4 01 	sts	0x01C4, r26
     856:	b0 93 c5 01 	sts	0x01C5, r27
     85a:	04 c0       	rjmp	.+8      	; 0x864 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     85c:	80 91 04 01 	lds	r24, 0x0104
     860:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     8a8:	80 91 c6 01 	lds	r24, 0x01C6
     8ac:	90 91 c7 01 	lds	r25, 0x01C7
     8b0:	89 2b       	or	r24, r25
     8b2:	29 f0       	breq	.+10     	; 0x8be <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     8b4:	e0 91 c6 01 	lds	r30, 0x01C6
     8b8:	f0 91 c7 01 	lds	r31, 0x01C7
     8bc:	09 95       	icall
}
     8be:	ff 91       	pop	r31
     8c0:	ef 91       	pop	r30
     8c2:	bf 91       	pop	r27
     8c4:	af 91       	pop	r26
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	7f 91       	pop	r23
     8cc:	6f 91       	pop	r22
     8ce:	5f 91       	pop	r21
     8d0:	4f 91       	pop	r20
     8d2:	3f 91       	pop	r19
     8d4:	2f 91       	pop	r18
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <__vector_2>:

ISR(INT1_vect) {
     8e0:	1f 92       	push	r1
     8e2:	0f 92       	push	r0
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	0f 92       	push	r0
     8e8:	11 24       	eor	r1, r1
     8ea:	2f 93       	push	r18
     8ec:	3f 93       	push	r19
     8ee:	4f 93       	push	r20
     8f0:	5f 93       	push	r21
     8f2:	6f 93       	push	r22
     8f4:	7f 93       	push	r23
     8f6:	8f 93       	push	r24
     8f8:	9f 93       	push	r25
     8fa:	af 93       	push	r26
     8fc:	bf 93       	push	r27
     8fe:	ef 93       	push	r30
     900:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     902:	80 91 c8 01 	lds	r24, 0x01C8
     906:	90 91 c9 01 	lds	r25, 0x01C9
     90a:	89 2b       	or	r24, r25
     90c:	29 f0       	breq	.+10     	; 0x918 <__stack+0x19>
    intFunc[EXTERNAL_INT_1]();
     90e:	e0 91 c8 01 	lds	r30, 0x01C8
     912:	f0 91 c9 01 	lds	r31, 0x01C9
     916:	09 95       	icall
}
     918:	ff 91       	pop	r31
     91a:	ef 91       	pop	r30
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	0f 90       	pop	r0
     932:	0f be       	out	0x3f, r0	; 63
     934:	0f 90       	pop	r0
     936:	1f 90       	pop	r1
     938:	18 95       	reti

0000093a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     93a:	1f 92       	push	r1
     93c:	0f 92       	push	r0
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	2f 93       	push	r18
     946:	3f 93       	push	r19
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     950:	80 91 cb 01 	lds	r24, 0x01CB
     954:	90 91 cc 01 	lds	r25, 0x01CC
     958:	a0 91 cd 01 	lds	r26, 0x01CD
     95c:	b0 91 ce 01 	lds	r27, 0x01CE
	unsigned char f = timer0_fract;
     960:	30 91 ca 01 	lds	r19, 0x01CA

	m += MILLIS_INC;
	f += FRACT_INC;
     964:	23 e0       	ldi	r18, 0x03	; 3
     966:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     968:	2d 37       	cpi	r18, 0x7D	; 125
     96a:	20 f4       	brcc	.+8      	; 0x974 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	a1 1d       	adc	r26, r1
     970:	b1 1d       	adc	r27, r1
     972:	05 c0       	rjmp	.+10     	; 0x97e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     974:	26 e8       	ldi	r18, 0x86	; 134
     976:	23 0f       	add	r18, r19
		m += 1;
     978:	02 96       	adiw	r24, 0x02	; 2
     97a:	a1 1d       	adc	r26, r1
     97c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     97e:	20 93 ca 01 	sts	0x01CA, r18
	timer0_millis = m;
     982:	80 93 cb 01 	sts	0x01CB, r24
     986:	90 93 cc 01 	sts	0x01CC, r25
     98a:	a0 93 cd 01 	sts	0x01CD, r26
     98e:	b0 93 ce 01 	sts	0x01CE, r27
	timer0_overflow_count++;
     992:	80 91 cf 01 	lds	r24, 0x01CF
     996:	90 91 d0 01 	lds	r25, 0x01D0
     99a:	a0 91 d1 01 	lds	r26, 0x01D1
     99e:	b0 91 d2 01 	lds	r27, 0x01D2
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	a1 1d       	adc	r26, r1
     9a6:	b1 1d       	adc	r27, r1
     9a8:	80 93 cf 01 	sts	0x01CF, r24
     9ac:	90 93 d0 01 	sts	0x01D0, r25
     9b0:	a0 93 d1 01 	sts	0x01D1, r26
     9b4:	b0 93 d2 01 	sts	0x01D2, r27
}
     9b8:	bf 91       	pop	r27
     9ba:	af 91       	pop	r26
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	1f 90       	pop	r1
     9cc:	18 95       	reti

000009ce <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     9ce:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     9d0:	f8 94       	cli
	m = timer0_overflow_count;
     9d2:	80 91 cf 01 	lds	r24, 0x01CF
     9d6:	90 91 d0 01 	lds	r25, 0x01D0
     9da:	a0 91 d1 01 	lds	r26, 0x01D1
     9de:	b0 91 d2 01 	lds	r27, 0x01D2
#if defined(TCNT0)
	t = TCNT0;
     9e2:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     9e4:	a8 9b       	sbis	0x15, 0	; 21
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <micros+0x24>
     9e8:	2f 3f       	cpi	r18, 0xFF	; 255
     9ea:	19 f0       	breq	.+6      	; 0x9f2 <micros+0x24>
		m++;
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	a1 1d       	adc	r26, r1
     9f0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     9f2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     9f4:	ba 2f       	mov	r27, r26
     9f6:	a9 2f       	mov	r26, r25
     9f8:	98 2f       	mov	r25, r24
     9fa:	88 27       	eor	r24, r24
     9fc:	82 0f       	add	r24, r18
     9fe:	91 1d       	adc	r25, r1
     a00:	a1 1d       	adc	r26, r1
     a02:	b1 1d       	adc	r27, r1
     a04:	bc 01       	movw	r22, r24
     a06:	cd 01       	movw	r24, r26
     a08:	66 0f       	add	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	88 1f       	adc	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	66 0f       	add	r22, r22
     a12:	77 1f       	adc	r23, r23
     a14:	88 1f       	adc	r24, r24
     a16:	99 1f       	adc	r25, r25
}
     a18:	08 95       	ret

00000a1a <delay>:

void delay(unsigned long ms)
{
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	6b 01       	movw	r12, r22
     a28:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     a2a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <micros>
     a2e:	eb 01       	movw	r28, r22

	while (ms > 0) {
     a30:	c1 14       	cp	r12, r1
     a32:	d1 04       	cpc	r13, r1
     a34:	e1 04       	cpc	r14, r1
     a36:	f1 04       	cpc	r15, r1
     a38:	a9 f0       	breq	.+42     	; 0xa64 <delay+0x4a>
		yield();
     a3a:	0e 94 93 02 	call	0x526	; 0x526 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
     a3e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <micros>
     a42:	6c 1b       	sub	r22, r28
     a44:	7d 0b       	sbc	r23, r29
     a46:	68 3e       	cpi	r22, 0xE8	; 232
     a48:	73 40       	sbci	r23, 0x03	; 3
     a4a:	38 f0       	brcs	.+14     	; 0xa5a <delay+0x40>
			ms--;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	c8 1a       	sub	r12, r24
     a50:	d1 08       	sbc	r13, r1
     a52:	e1 08       	sbc	r14, r1
     a54:	f1 08       	sbc	r15, r1
			start += 1000;
     a56:	c8 51       	subi	r28, 0x18	; 24
     a58:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     a5a:	c1 14       	cp	r12, r1
     a5c:	d1 04       	cpc	r13, r1
     a5e:	e1 04       	cpc	r14, r1
     a60:	f1 04       	cpc	r15, r1
     a62:	59 f7       	brne	.-42     	; 0xa3a <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	08 95       	ret

00000a72 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	39 f0       	breq	.+14     	; 0xa84 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
     a7e:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <delayMicroseconds+0xe>
     a84:	08 95       	ret

00000a86 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     a86:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     a88:	84 b5       	in	r24, 0x24	; 36
     a8a:	82 60       	ori	r24, 0x02	; 2
     a8c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     a8e:	84 b5       	in	r24, 0x24	; 36
     a90:	81 60       	ori	r24, 0x01	; 1
     a92:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     a94:	85 b5       	in	r24, 0x25	; 37
     a96:	82 60       	ori	r24, 0x02	; 2
     a98:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     a9a:	85 b5       	in	r24, 0x25	; 37
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     aa0:	ee e6       	ldi	r30, 0x6E	; 110
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	81 60       	ori	r24, 0x01	; 1
     aa8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     aaa:	e1 e8       	ldi	r30, 0x81	; 129
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ab6:	80 81       	ld	r24, Z
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     abc:	e0 e8       	ldi	r30, 0x80	; 128
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ac6:	e1 eb       	ldi	r30, 0xB1	; 177
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	84 60       	ori	r24, 0x04	; 4
     ace:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ad0:	e0 eb       	ldi	r30, 0xB0	; 176
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	81 60       	ori	r24, 0x01	; 1
     ad8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     ada:	ea e7       	ldi	r30, 0x7A	; 122
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	84 60       	ori	r24, 0x04	; 4
     ae2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     ae4:	80 81       	ld	r24, Z
     ae6:	82 60       	ori	r24, 0x02	; 2
     ae8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     aea:	80 81       	ld	r24, Z
     aec:	81 60       	ori	r24, 0x01	; 1
     aee:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     af0:	80 81       	ld	r24, Z
     af2:	80 68       	ori	r24, 0x80	; 128
     af4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     af6:	10 92 c1 00 	sts	0x00C1, r1
     afa:	08 95       	ret

00000afc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     afc:	83 30       	cpi	r24, 0x03	; 3
     afe:	69 f0       	breq	.+26     	; 0xb1a <turnOffPWM+0x1e>
     b00:	28 f4       	brcc	.+10     	; 0xb0c <turnOffPWM+0x10>
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	b1 f0       	breq	.+44     	; 0xb32 <turnOffPWM+0x36>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	c1 f0       	breq	.+48     	; 0xb3a <turnOffPWM+0x3e>
     b0a:	08 95       	ret
     b0c:	87 30       	cpi	r24, 0x07	; 7
     b0e:	c9 f0       	breq	.+50     	; 0xb42 <turnOffPWM+0x46>
     b10:	88 30       	cpi	r24, 0x08	; 8
     b12:	e9 f0       	breq	.+58     	; 0xb4e <turnOffPWM+0x52>
     b14:	84 30       	cpi	r24, 0x04	; 4
     b16:	01 f5       	brne	.+64     	; 0xb58 <turnOffPWM+0x5c>
     b18:	06 c0       	rjmp	.+12     	; 0xb26 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b1a:	e0 e8       	ldi	r30, 0x80	; 128
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	8f 77       	andi	r24, 0x7F	; 127
     b22:	80 83       	st	Z, r24
     b24:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b26:	e0 e8       	ldi	r30, 0x80	; 128
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	8f 7d       	andi	r24, 0xDF	; 223
     b2e:	80 83       	st	Z, r24
     b30:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b32:	84 b5       	in	r24, 0x24	; 36
     b34:	8f 77       	andi	r24, 0x7F	; 127
     b36:	84 bd       	out	0x24, r24	; 36
     b38:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b3a:	84 b5       	in	r24, 0x24	; 36
     b3c:	8f 7d       	andi	r24, 0xDF	; 223
     b3e:	84 bd       	out	0x24, r24	; 36
     b40:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b42:	e0 eb       	ldi	r30, 0xB0	; 176
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 77       	andi	r24, 0x7F	; 127
     b4a:	80 83       	st	Z, r24
     b4c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b4e:	e0 eb       	ldi	r30, 0xB0	; 176
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8f 7d       	andi	r24, 0xDF	; 223
     b56:	80 83       	st	Z, r24
     b58:	08 95       	ret

00000b5a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	fc 01       	movw	r30, r24
     b62:	e3 58       	subi	r30, 0x83	; 131
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b68:	fc 01       	movw	r30, r24
     b6a:	ef 56       	subi	r30, 0x6F	; 111
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b70:	88 23       	and	r24, r24
     b72:	79 f1       	breq	.+94     	; 0xbd2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	fc 01       	movw	r30, r24
     b7c:	e7 54       	subi	r30, 0x47	; 71
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	a5 91       	lpm	r26, Z+
     b82:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     b84:	fc 01       	movw	r30, r24
     b86:	e1 55       	subi	r30, 0x51	; 81
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	c5 91       	lpm	r28, Z+
     b8c:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     b8e:	61 11       	cpse	r22, r1
     b90:	0c c0       	rjmp	.+24     	; 0xbaa <pinMode+0x50>
		uint8_t oldSREG = SREG;
     b92:	9f b7       	in	r25, 0x3f	; 63
                cli();
     b94:	f8 94       	cli
		*reg &= ~bit;
     b96:	8c 91       	ld	r24, X
     b98:	e2 2f       	mov	r30, r18
     b9a:	e0 95       	com	r30
     b9c:	8e 23       	and	r24, r30
     b9e:	8c 93       	st	X, r24
		*out &= ~bit;
     ba0:	28 81       	ld	r18, Y
     ba2:	e2 23       	and	r30, r18
     ba4:	e8 83       	st	Y, r30
		SREG = oldSREG;
     ba6:	9f bf       	out	0x3f, r25	; 63
     ba8:	14 c0       	rjmp	.+40     	; 0xbd2 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     baa:	62 30       	cpi	r22, 0x02	; 2
     bac:	61 f4       	brne	.+24     	; 0xbc6 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     bae:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bb0:	f8 94       	cli
		*reg &= ~bit;
     bb2:	3c 91       	ld	r19, X
     bb4:	82 2f       	mov	r24, r18
     bb6:	80 95       	com	r24
     bb8:	83 23       	and	r24, r19
     bba:	8c 93       	st	X, r24
		*out |= bit;
     bbc:	e8 81       	ld	r30, Y
     bbe:	e2 2b       	or	r30, r18
     bc0:	e8 83       	st	Y, r30
		SREG = oldSREG;
     bc2:	9f bf       	out	0x3f, r25	; 63
     bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     bc6:	8f b7       	in	r24, 0x3f	; 63
                cli();
     bc8:	f8 94       	cli
		*reg |= bit;
     bca:	ec 91       	ld	r30, X
     bcc:	e2 2b       	or	r30, r18
     bce:	ec 93       	st	X, r30
		SREG = oldSREG;
     bd0:	8f bf       	out	0x3f, r24	; 63
	}
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	f9 01       	movw	r30, r18
     be4:	e7 59       	subi	r30, 0x97	; 151
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     bea:	f9 01       	movw	r30, r18
     bec:	e3 58       	subi	r30, 0x83	; 131
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     bf2:	f9 01       	movw	r30, r18
     bf4:	ef 56       	subi	r30, 0x6F	; 111
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     bfa:	cc 23       	and	r28, r28
     bfc:	d1 f0       	breq	.+52     	; 0xc32 <digitalWrite+0x5a>
     bfe:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c00:	81 11       	cpse	r24, r1
     c02:	0e 94 7e 05 	call	0xafc	; 0xafc <turnOffPWM>

	out = portOutputRegister(port);
     c06:	ec 2f       	mov	r30, r28
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e1 55       	subi	r30, 0x51	; 81
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	a5 91       	lpm	r26, Z+
     c14:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c16:	8f b7       	in	r24, 0x3f	; 63
	cli();
     c18:	f8 94       	cli

	if (val == LOW) {
     c1a:	d1 11       	cpse	r29, r1
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <digitalWrite+0x52>
		*out &= ~bit;
     c1e:	9c 91       	ld	r25, X
     c20:	e1 2f       	mov	r30, r17
     c22:	e0 95       	com	r30
     c24:	e9 23       	and	r30, r25
     c26:	ec 93       	st	X, r30
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <digitalWrite+0x58>
	} else {
		*out |= bit;
     c2a:	ec 91       	ld	r30, X
     c2c:	e1 2b       	or	r30, r17
     c2e:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     c30:	8f bf       	out	0x3f, r24	; 63
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	08 95       	ret

00000c3a <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
     c3a:	8f 92       	push	r8
     c3c:	9f 92       	push	r9
     c3e:	af 92       	push	r10
     c40:	bf 92       	push	r11
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	fc 01       	movw	r30, r24
     c56:	e3 58       	subi	r30, 0x83	; 131
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
     c5c:	fc 01       	movw	r30, r24
     c5e:	ef 56       	subi	r30, 0x6F	; 111
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	84 91       	lpm	r24, Z
	uint8_t stateMask = (state ? bit : 0);
     c64:	66 23       	and	r22, r22
     c66:	11 f0       	breq	.+4      	; 0xc6c <pulseIn+0x32>
     c68:	67 2f       	mov	r22, r23
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <pulseIn+0x34>
     c6c:	60 e0       	ldi	r22, 0x00	; 0
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
     c6e:	69 01       	movw	r12, r18
     c70:	7a 01       	movw	r14, r20
     c72:	9f e0       	ldi	r25, 0x0F	; 15
     c74:	f9 22       	and	r15, r25
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     c76:	48 2f       	mov	r20, r24
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	44 0f       	add	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	4b 55       	subi	r20, 0x5B	; 91
     c80:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	dc 01       	movw	r26, r24
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     c88:	0e c0       	rjmp	.+28     	; 0xca6 <pulseIn+0x6c>
		if (numloops++ == maxloops)
     c8a:	8c 01       	movw	r16, r24
     c8c:	9d 01       	movw	r18, r26
     c8e:	0f 5f       	subi	r16, 0xFF	; 255
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	2f 4f       	sbci	r18, 0xFF	; 255
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	8c 15       	cp	r24, r12
     c98:	9d 05       	cpc	r25, r13
     c9a:	ae 05       	cpc	r26, r14
     c9c:	bf 05       	cpc	r27, r15
     c9e:	09 f4       	brne	.+2      	; 0xca2 <pulseIn+0x68>
     ca0:	6f c0       	rjmp	.+222    	; 0xd80 <pulseIn+0x146>
     ca2:	d9 01       	movw	r26, r18
     ca4:	c8 01       	movw	r24, r16
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     ca6:	fa 01       	movw	r30, r20
     ca8:	c5 91       	lpm	r28, Z+
     caa:	d4 91       	lpm	r29, Z
     cac:	38 81       	ld	r19, Y
     cae:	37 23       	and	r19, r23
     cb0:	63 17       	cp	r22, r19
     cb2:	59 f3       	breq	.-42     	; 0xc8a <pulseIn+0x50>
     cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <pulseIn+0x98>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
     cb6:	8c 01       	movw	r16, r24
     cb8:	9d 01       	movw	r18, r26
     cba:	0f 5f       	subi	r16, 0xFF	; 255
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	2f 4f       	sbci	r18, 0xFF	; 255
     cc0:	3f 4f       	sbci	r19, 0xFF	; 255
     cc2:	8c 15       	cp	r24, r12
     cc4:	9d 05       	cpc	r25, r13
     cc6:	ae 05       	cpc	r26, r14
     cc8:	bf 05       	cpc	r27, r15
     cca:	09 f4       	brne	.+2      	; 0xcce <pulseIn+0x94>
     ccc:	5d c0       	rjmp	.+186    	; 0xd88 <pulseIn+0x14e>
     cce:	d9 01       	movw	r26, r18
     cd0:	c8 01       	movw	r24, r16
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
     cd2:	fa 01       	movw	r30, r20
     cd4:	c5 91       	lpm	r28, Z+
     cd6:	d4 91       	lpm	r29, Z
     cd8:	38 81       	ld	r19, Y
     cda:	37 23       	and	r19, r23
     cdc:	63 13       	cpse	r22, r19
     cde:	eb cf       	rjmp	.-42     	; 0xcb6 <pulseIn+0x7c>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     ce0:	fa 01       	movw	r30, r20
     ce2:	c5 91       	lpm	r28, Z+
     ce4:	d4 91       	lpm	r29, Z
     ce6:	28 81       	ld	r18, Y
     ce8:	27 23       	and	r18, r23
     cea:	62 13       	cpse	r22, r18
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <pulseIn+0xf8>
		if (numloops++ == maxloops)
     cee:	c8 16       	cp	r12, r24
     cf0:	d9 06       	cpc	r13, r25
     cf2:	ea 06       	cpc	r14, r26
     cf4:	fb 06       	cpc	r15, r27
     cf6:	09 f4       	brne	.+2      	; 0xcfa <pulseIn+0xc0>
     cf8:	4b c0       	rjmp	.+150    	; 0xd90 <pulseIn+0x156>
     cfa:	00 e0       	ldi	r16, 0x00	; 0
     cfc:	10 e0       	ldi	r17, 0x00	; 0
     cfe:	98 01       	movw	r18, r16
     d00:	0c c0       	rjmp	.+24     	; 0xd1a <pulseIn+0xe0>
     d02:	4c 01       	movw	r8, r24
     d04:	5d 01       	movw	r10, r26
     d06:	80 0e       	add	r8, r16
     d08:	91 1e       	adc	r9, r17
     d0a:	a2 1e       	adc	r10, r18
     d0c:	b3 1e       	adc	r11, r19
     d0e:	c8 14       	cp	r12, r8
     d10:	d9 04       	cpc	r13, r9
     d12:	ea 04       	cpc	r14, r10
     d14:	fb 04       	cpc	r15, r11
     d16:	09 f4       	brne	.+2      	; 0xd1a <pulseIn+0xe0>
     d18:	3f c0       	rjmp	.+126    	; 0xd98 <pulseIn+0x15e>
			return 0;
		width++;
     d1a:	0f 5f       	subi	r16, 0xFF	; 255
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	2f 4f       	sbci	r18, 0xFF	; 255
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     d22:	fa 01       	movw	r30, r20
     d24:	c5 91       	lpm	r28, Z+
     d26:	d4 91       	lpm	r29, Z
     d28:	e8 81       	ld	r30, Y
     d2a:	e7 23       	and	r30, r23
     d2c:	6e 17       	cp	r22, r30
     d2e:	49 f3       	breq	.-46     	; 0xd02 <pulseIn+0xc8>
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <pulseIn+0xfe>
     d32:	00 e0       	ldi	r16, 0x00	; 0
     d34:	10 e0       	ldi	r17, 0x00	; 0
     d36:	98 01       	movw	r18, r16
	#warning "pulseIn() results may not be accurate"
	return clockCyclesToMicroseconds(width * 21 + 16);
#else
	// avr-gcc >4.3.x
	#warning "pulseIn() results may not be accurate"
	return clockCyclesToMicroseconds(width * 24 + 16);
     d38:	d9 01       	movw	r26, r18
     d3a:	c8 01       	movw	r24, r16
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	aa 1f       	adc	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	80 0f       	add	r24, r16
     d46:	91 1f       	adc	r25, r17
     d48:	a2 1f       	adc	r26, r18
     d4a:	b3 1f       	adc	r27, r19
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	aa 1f       	adc	r26, r26
     d52:	bb 1f       	adc	r27, r27
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	aa 1f       	adc	r26, r26
     d5a:	bb 1f       	adc	r27, r27
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	aa 1f       	adc	r26, r26
     d62:	bb 1f       	adc	r27, r27
     d64:	40 96       	adiw	r24, 0x10	; 16
     d66:	a1 1d       	adc	r26, r1
     d68:	b1 1d       	adc	r27, r1
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	68 94       	set
     d70:	13 f8       	bld	r1, 3
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24
     d76:	77 95       	ror	r23
     d78:	67 95       	ror	r22
     d7a:	16 94       	lsr	r1
     d7c:	d1 f7       	brne	.-12     	; 0xd72 <pulseIn+0x138>
     d7e:	0f c0       	rjmp	.+30     	; 0xd9e <pulseIn+0x164>
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	cb 01       	movw	r24, r22
     d86:	0b c0       	rjmp	.+22     	; 0xd9e <pulseIn+0x164>
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <pulseIn+0x164>
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
			return 0;
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	cb 01       	movw	r24, r22
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <pulseIn+0x164>
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	cb 01       	movw	r24, r22
	// avr-gcc >4.3.x
	#warning "pulseIn() results may not be accurate"
	return clockCyclesToMicroseconds(width * 24 + 16);
#endif

}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	08 95       	ret

00000db8 <__divsf3>:
     db8:	0e 94 f0 06 	call	0xde0	; 0xde0 <__divsf3x>
     dbc:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_round>
     dc0:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__fp_pscB>
     dc4:	58 f0       	brcs	.+22     	; 0xddc <__divsf3+0x24>
     dc6:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_pscA>
     dca:	40 f0       	brcs	.+16     	; 0xddc <__divsf3+0x24>
     dcc:	29 f4       	brne	.+10     	; 0xdd8 <__divsf3+0x20>
     dce:	5f 3f       	cpi	r21, 0xFF	; 255
     dd0:	29 f0       	breq	.+10     	; 0xddc <__divsf3+0x24>
     dd2:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_inf>
     dd6:	51 11       	cpse	r21, r1
     dd8:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__fp_szero>
     ddc:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_nan>

00000de0 <__divsf3x>:
     de0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__fp_split3>
     de4:	68 f3       	brcs	.-38     	; 0xdc0 <__divsf3+0x8>

00000de6 <__divsf3_pse>:
     de6:	99 23       	and	r25, r25
     de8:	b1 f3       	breq	.-20     	; 0xdd6 <__divsf3+0x1e>
     dea:	55 23       	and	r21, r21
     dec:	91 f3       	breq	.-28     	; 0xdd2 <__divsf3+0x1a>
     dee:	95 1b       	sub	r25, r21
     df0:	55 0b       	sbc	r21, r21
     df2:	bb 27       	eor	r27, r27
     df4:	aa 27       	eor	r26, r26
     df6:	62 17       	cp	r22, r18
     df8:	73 07       	cpc	r23, r19
     dfa:	84 07       	cpc	r24, r20
     dfc:	38 f0       	brcs	.+14     	; 0xe0c <__divsf3_pse+0x26>
     dfe:	9f 5f       	subi	r25, 0xFF	; 255
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	22 0f       	add	r18, r18
     e04:	33 1f       	adc	r19, r19
     e06:	44 1f       	adc	r20, r20
     e08:	aa 1f       	adc	r26, r26
     e0a:	a9 f3       	breq	.-22     	; 0xdf6 <__divsf3_pse+0x10>
     e0c:	35 d0       	rcall	.+106    	; 0xe78 <__divsf3_pse+0x92>
     e0e:	0e 2e       	mov	r0, r30
     e10:	3a f0       	brmi	.+14     	; 0xe20 <__divsf3_pse+0x3a>
     e12:	e0 e8       	ldi	r30, 0x80	; 128
     e14:	32 d0       	rcall	.+100    	; 0xe7a <__divsf3_pse+0x94>
     e16:	91 50       	subi	r25, 0x01	; 1
     e18:	50 40       	sbci	r21, 0x00	; 0
     e1a:	e6 95       	lsr	r30
     e1c:	00 1c       	adc	r0, r0
     e1e:	ca f7       	brpl	.-14     	; 0xe12 <__divsf3_pse+0x2c>
     e20:	2b d0       	rcall	.+86     	; 0xe78 <__divsf3_pse+0x92>
     e22:	fe 2f       	mov	r31, r30
     e24:	29 d0       	rcall	.+82     	; 0xe78 <__divsf3_pse+0x92>
     e26:	66 0f       	add	r22, r22
     e28:	77 1f       	adc	r23, r23
     e2a:	88 1f       	adc	r24, r24
     e2c:	bb 1f       	adc	r27, r27
     e2e:	26 17       	cp	r18, r22
     e30:	37 07       	cpc	r19, r23
     e32:	48 07       	cpc	r20, r24
     e34:	ab 07       	cpc	r26, r27
     e36:	b0 e8       	ldi	r27, 0x80	; 128
     e38:	09 f0       	breq	.+2      	; 0xe3c <__divsf3_pse+0x56>
     e3a:	bb 0b       	sbc	r27, r27
     e3c:	80 2d       	mov	r24, r0
     e3e:	bf 01       	movw	r22, r30
     e40:	ff 27       	eor	r31, r31
     e42:	93 58       	subi	r25, 0x83	; 131
     e44:	5f 4f       	sbci	r21, 0xFF	; 255
     e46:	3a f0       	brmi	.+14     	; 0xe56 <__divsf3_pse+0x70>
     e48:	9e 3f       	cpi	r25, 0xFE	; 254
     e4a:	51 05       	cpc	r21, r1
     e4c:	78 f0       	brcs	.+30     	; 0xe6c <__divsf3_pse+0x86>
     e4e:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_inf>
     e52:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__fp_szero>
     e56:	5f 3f       	cpi	r21, 0xFF	; 255
     e58:	e4 f3       	brlt	.-8      	; 0xe52 <__divsf3_pse+0x6c>
     e5a:	98 3e       	cpi	r25, 0xE8	; 232
     e5c:	d4 f3       	brlt	.-12     	; 0xe52 <__divsf3_pse+0x6c>
     e5e:	86 95       	lsr	r24
     e60:	77 95       	ror	r23
     e62:	67 95       	ror	r22
     e64:	b7 95       	ror	r27
     e66:	f7 95       	ror	r31
     e68:	9f 5f       	subi	r25, 0xFF	; 255
     e6a:	c9 f7       	brne	.-14     	; 0xe5e <__divsf3_pse+0x78>
     e6c:	88 0f       	add	r24, r24
     e6e:	91 1d       	adc	r25, r1
     e70:	96 95       	lsr	r25
     e72:	87 95       	ror	r24
     e74:	97 f9       	bld	r25, 7
     e76:	08 95       	ret
     e78:	e1 e0       	ldi	r30, 0x01	; 1
     e7a:	66 0f       	add	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	88 1f       	adc	r24, r24
     e80:	bb 1f       	adc	r27, r27
     e82:	62 17       	cp	r22, r18
     e84:	73 07       	cpc	r23, r19
     e86:	84 07       	cpc	r24, r20
     e88:	ba 07       	cpc	r27, r26
     e8a:	20 f0       	brcs	.+8      	; 0xe94 <__divsf3_pse+0xae>
     e8c:	62 1b       	sub	r22, r18
     e8e:	73 0b       	sbc	r23, r19
     e90:	84 0b       	sbc	r24, r20
     e92:	ba 0b       	sbc	r27, r26
     e94:	ee 1f       	adc	r30, r30
     e96:	88 f7       	brcc	.-30     	; 0xe7a <__divsf3_pse+0x94>
     e98:	e0 95       	com	r30
     e9a:	08 95       	ret

00000e9c <__fixsfsi>:
     e9c:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fixunssfsi>
     ea0:	68 94       	set
     ea2:	b1 11       	cpse	r27, r1
     ea4:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__fp_szero>
     ea8:	08 95       	ret

00000eaa <__fixunssfsi>:
     eaa:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__fp_splitA>
     eae:	88 f0       	brcs	.+34     	; 0xed2 <__fixunssfsi+0x28>
     eb0:	9f 57       	subi	r25, 0x7F	; 127
     eb2:	98 f0       	brcs	.+38     	; 0xeda <__fixunssfsi+0x30>
     eb4:	b9 2f       	mov	r27, r25
     eb6:	99 27       	eor	r25, r25
     eb8:	b7 51       	subi	r27, 0x17	; 23
     eba:	b0 f0       	brcs	.+44     	; 0xee8 <__fixunssfsi+0x3e>
     ebc:	e1 f0       	breq	.+56     	; 0xef6 <__fixunssfsi+0x4c>
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	1a f0       	brmi	.+6      	; 0xece <__fixunssfsi+0x24>
     ec8:	ba 95       	dec	r27
     eca:	c9 f7       	brne	.-14     	; 0xebe <__fixunssfsi+0x14>
     ecc:	14 c0       	rjmp	.+40     	; 0xef6 <__fixunssfsi+0x4c>
     ece:	b1 30       	cpi	r27, 0x01	; 1
     ed0:	91 f0       	breq	.+36     	; 0xef6 <__fixunssfsi+0x4c>
     ed2:	0e 94 0b 08 	call	0x1016	; 0x1016 <__fp_zero>
     ed6:	b1 e0       	ldi	r27, 0x01	; 1
     ed8:	08 95       	ret
     eda:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_zero>
     ede:	67 2f       	mov	r22, r23
     ee0:	78 2f       	mov	r23, r24
     ee2:	88 27       	eor	r24, r24
     ee4:	b8 5f       	subi	r27, 0xF8	; 248
     ee6:	39 f0       	breq	.+14     	; 0xef6 <__fixunssfsi+0x4c>
     ee8:	b9 3f       	cpi	r27, 0xF9	; 249
     eea:	cc f3       	brlt	.-14     	; 0xede <__fixunssfsi+0x34>
     eec:	86 95       	lsr	r24
     eee:	77 95       	ror	r23
     ef0:	67 95       	ror	r22
     ef2:	b3 95       	inc	r27
     ef4:	d9 f7       	brne	.-10     	; 0xeec <__fixunssfsi+0x42>
     ef6:	3e f4       	brtc	.+14     	; 0xf06 <__fixunssfsi+0x5c>
     ef8:	90 95       	com	r25
     efa:	80 95       	com	r24
     efc:	70 95       	com	r23
     efe:	61 95       	neg	r22
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	8f 4f       	sbci	r24, 0xFF	; 255
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	08 95       	ret

00000f08 <__floatunsisf>:
     f08:	e8 94       	clt
     f0a:	09 c0       	rjmp	.+18     	; 0xf1e <__floatsisf+0x12>

00000f0c <__floatsisf>:
     f0c:	97 fb       	bst	r25, 7
     f0e:	3e f4       	brtc	.+14     	; 0xf1e <__floatsisf+0x12>
     f10:	90 95       	com	r25
     f12:	80 95       	com	r24
     f14:	70 95       	com	r23
     f16:	61 95       	neg	r22
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	99 23       	and	r25, r25
     f20:	a9 f0       	breq	.+42     	; 0xf4c <__floatsisf+0x40>
     f22:	f9 2f       	mov	r31, r25
     f24:	96 e9       	ldi	r25, 0x96	; 150
     f26:	bb 27       	eor	r27, r27
     f28:	93 95       	inc	r25
     f2a:	f6 95       	lsr	r31
     f2c:	87 95       	ror	r24
     f2e:	77 95       	ror	r23
     f30:	67 95       	ror	r22
     f32:	b7 95       	ror	r27
     f34:	f1 11       	cpse	r31, r1
     f36:	f8 cf       	rjmp	.-16     	; 0xf28 <__floatsisf+0x1c>
     f38:	fa f4       	brpl	.+62     	; 0xf78 <__floatsisf+0x6c>
     f3a:	bb 0f       	add	r27, r27
     f3c:	11 f4       	brne	.+4      	; 0xf42 <__floatsisf+0x36>
     f3e:	60 ff       	sbrs	r22, 0
     f40:	1b c0       	rjmp	.+54     	; 0xf78 <__floatsisf+0x6c>
     f42:	6f 5f       	subi	r22, 0xFF	; 255
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	8f 4f       	sbci	r24, 0xFF	; 255
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	16 c0       	rjmp	.+44     	; 0xf78 <__floatsisf+0x6c>
     f4c:	88 23       	and	r24, r24
     f4e:	11 f0       	breq	.+4      	; 0xf54 <__floatsisf+0x48>
     f50:	96 e9       	ldi	r25, 0x96	; 150
     f52:	11 c0       	rjmp	.+34     	; 0xf76 <__floatsisf+0x6a>
     f54:	77 23       	and	r23, r23
     f56:	21 f0       	breq	.+8      	; 0xf60 <__floatsisf+0x54>
     f58:	9e e8       	ldi	r25, 0x8E	; 142
     f5a:	87 2f       	mov	r24, r23
     f5c:	76 2f       	mov	r23, r22
     f5e:	05 c0       	rjmp	.+10     	; 0xf6a <__floatsisf+0x5e>
     f60:	66 23       	and	r22, r22
     f62:	71 f0       	breq	.+28     	; 0xf80 <__floatsisf+0x74>
     f64:	96 e8       	ldi	r25, 0x86	; 134
     f66:	86 2f       	mov	r24, r22
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	2a f0       	brmi	.+10     	; 0xf78 <__floatsisf+0x6c>
     f6e:	9a 95       	dec	r25
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	da f7       	brpl	.-10     	; 0xf6e <__floatsisf+0x62>
     f78:	88 0f       	add	r24, r24
     f7a:	96 95       	lsr	r25
     f7c:	87 95       	ror	r24
     f7e:	97 f9       	bld	r25, 7
     f80:	08 95       	ret

00000f82 <__fp_inf>:
     f82:	97 f9       	bld	r25, 7
     f84:	9f 67       	ori	r25, 0x7F	; 127
     f86:	80 e8       	ldi	r24, 0x80	; 128
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	08 95       	ret

00000f8e <__fp_nan>:
     f8e:	9f ef       	ldi	r25, 0xFF	; 255
     f90:	80 ec       	ldi	r24, 0xC0	; 192
     f92:	08 95       	ret

00000f94 <__fp_pscA>:
     f94:	00 24       	eor	r0, r0
     f96:	0a 94       	dec	r0
     f98:	16 16       	cp	r1, r22
     f9a:	17 06       	cpc	r1, r23
     f9c:	18 06       	cpc	r1, r24
     f9e:	09 06       	cpc	r0, r25
     fa0:	08 95       	ret

00000fa2 <__fp_pscB>:
     fa2:	00 24       	eor	r0, r0
     fa4:	0a 94       	dec	r0
     fa6:	12 16       	cp	r1, r18
     fa8:	13 06       	cpc	r1, r19
     faa:	14 06       	cpc	r1, r20
     fac:	05 06       	cpc	r0, r21
     fae:	08 95       	ret

00000fb0 <__fp_round>:
     fb0:	09 2e       	mov	r0, r25
     fb2:	03 94       	inc	r0
     fb4:	00 0c       	add	r0, r0
     fb6:	11 f4       	brne	.+4      	; 0xfbc <__fp_round+0xc>
     fb8:	88 23       	and	r24, r24
     fba:	52 f0       	brmi	.+20     	; 0xfd0 <__fp_round+0x20>
     fbc:	bb 0f       	add	r27, r27
     fbe:	40 f4       	brcc	.+16     	; 0xfd0 <__fp_round+0x20>
     fc0:	bf 2b       	or	r27, r31
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <__fp_round+0x18>
     fc4:	60 ff       	sbrs	r22, 0
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <__fp_round+0x20>
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	08 95       	ret

00000fd2 <__fp_split3>:
     fd2:	57 fd       	sbrc	r21, 7
     fd4:	90 58       	subi	r25, 0x80	; 128
     fd6:	44 0f       	add	r20, r20
     fd8:	55 1f       	adc	r21, r21
     fda:	59 f0       	breq	.+22     	; 0xff2 <__fp_splitA+0x10>
     fdc:	5f 3f       	cpi	r21, 0xFF	; 255
     fde:	71 f0       	breq	.+28     	; 0xffc <__fp_splitA+0x1a>
     fe0:	47 95       	ror	r20

00000fe2 <__fp_splitA>:
     fe2:	88 0f       	add	r24, r24
     fe4:	97 fb       	bst	r25, 7
     fe6:	99 1f       	adc	r25, r25
     fe8:	61 f0       	breq	.+24     	; 0x1002 <__fp_splitA+0x20>
     fea:	9f 3f       	cpi	r25, 0xFF	; 255
     fec:	79 f0       	breq	.+30     	; 0x100c <__fp_splitA+0x2a>
     fee:	87 95       	ror	r24
     ff0:	08 95       	ret
     ff2:	12 16       	cp	r1, r18
     ff4:	13 06       	cpc	r1, r19
     ff6:	14 06       	cpc	r1, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	f2 cf       	rjmp	.-28     	; 0xfe0 <__fp_split3+0xe>
     ffc:	46 95       	lsr	r20
     ffe:	f1 df       	rcall	.-30     	; 0xfe2 <__fp_splitA>
    1000:	08 c0       	rjmp	.+16     	; 0x1012 <__fp_splitA+0x30>
    1002:	16 16       	cp	r1, r22
    1004:	17 06       	cpc	r1, r23
    1006:	18 06       	cpc	r1, r24
    1008:	99 1f       	adc	r25, r25
    100a:	f1 cf       	rjmp	.-30     	; 0xfee <__fp_splitA+0xc>
    100c:	86 95       	lsr	r24
    100e:	71 05       	cpc	r23, r1
    1010:	61 05       	cpc	r22, r1
    1012:	08 94       	sec
    1014:	08 95       	ret

00001016 <__fp_zero>:
    1016:	e8 94       	clt

00001018 <__fp_szero>:
    1018:	bb 27       	eor	r27, r27
    101a:	66 27       	eor	r22, r22
    101c:	77 27       	eor	r23, r23
    101e:	cb 01       	movw	r24, r22
    1020:	97 f9       	bld	r25, 7
    1022:	08 95       	ret

00001024 <__udivmodsi4>:
    1024:	a1 e2       	ldi	r26, 0x21	; 33
    1026:	1a 2e       	mov	r1, r26
    1028:	aa 1b       	sub	r26, r26
    102a:	bb 1b       	sub	r27, r27
    102c:	fd 01       	movw	r30, r26
    102e:	0d c0       	rjmp	.+26     	; 0x104a <__udivmodsi4_ep>

00001030 <__udivmodsi4_loop>:
    1030:	aa 1f       	adc	r26, r26
    1032:	bb 1f       	adc	r27, r27
    1034:	ee 1f       	adc	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	a2 17       	cp	r26, r18
    103a:	b3 07       	cpc	r27, r19
    103c:	e4 07       	cpc	r30, r20
    103e:	f5 07       	cpc	r31, r21
    1040:	20 f0       	brcs	.+8      	; 0x104a <__udivmodsi4_ep>
    1042:	a2 1b       	sub	r26, r18
    1044:	b3 0b       	sbc	r27, r19
    1046:	e4 0b       	sbc	r30, r20
    1048:	f5 0b       	sbc	r31, r21

0000104a <__udivmodsi4_ep>:
    104a:	66 1f       	adc	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	88 1f       	adc	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	1a 94       	dec	r1
    1054:	69 f7       	brne	.-38     	; 0x1030 <__udivmodsi4_loop>
    1056:	60 95       	com	r22
    1058:	70 95       	com	r23
    105a:	80 95       	com	r24
    105c:	90 95       	com	r25
    105e:	9b 01       	movw	r18, r22
    1060:	ac 01       	movw	r20, r24
    1062:	bd 01       	movw	r22, r26
    1064:	cf 01       	movw	r24, r30
    1066:	08 95       	ret

00001068 <__tablejump2__>:
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	05 90       	lpm	r0, Z+
    106e:	f4 91       	lpm	r31, Z
    1070:	e0 2d       	mov	r30, r0
    1072:	09 94       	ijmp

00001074 <_exit>:
    1074:	f8 94       	cli

00001076 <__stop_program>:
    1076:	ff cf       	rjmp	.-2      	; 0x1076 <__stop_program>
