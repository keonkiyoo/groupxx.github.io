
T06_finalCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001060  000010f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  00800122  00800122  00001116  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007ab2  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016a0  00000000  00000000  00008fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c4  00000000  00000000  0000a65a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad4  00000000  00000000  0000ba20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c63  00000000  00000000  0000c4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004166  00000000  00000000  0000e157  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  000122bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_1>
       8:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_2>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_7>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_18>
      4c:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	5a 02       	muls	r21, r26
      c6:	ca 02       	muls	r28, r26

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e0 e6       	ldi	r30, 0x60	; 96
      dc:	f0 e1       	ldi	r31, 0x10	; 16
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a2 32       	cpi	r26, 0x22	; 34
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	a2 e2       	ldi	r26, 0x22	; 34
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a9 3d       	cpi	r26, 0xD9	; 217
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c4 e6       	ldi	r28, 0x64	; 100
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 28 08 	call	0x1050	; 0x1050 <__tablejump2__>
     10a:	c2 36       	cpi	r28, 0x62	; 98
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 d6 02 	call	0x5ac	; 0x5ac <main>
     114:	0c 94 2e 08 	jmp	0x105c	; 0x105c <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
int constantDistance_1 = 10; // The sensor one should have atleast 50 cm or less to detect obstacles
int constantDistance_2 = 5; // The sensor two should have atleast 20 cm or less to detect obstacles
int constantDistance_3 = 10; // The sensor three should have atleast 20 cm or less to detect obstacles
int i = 1;

void setup() {
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
  pinMode(Motor, OUTPUT); // Declare the LED as an output pin
     120:	c4 e0       	ldi	r28, 0x04	; 4
     122:	d1 e0       	ldi	r29, 0x01	; 1
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	88 81       	ld	r24, Y
     128:	0e 94 a1 05 	call	0xb42	; 0xb42 <pinMode>
  digitalWrite(Motor, LOW); //Declare the LED to be LOW initially
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	88 81       	ld	r24, Y
     130:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <digitalWrite>
}
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <_Z11TriggerReadi>:
		digitalWrite(Motor, LOW); //  Turn it off if it is not within range
	}
}

// Send atleast 10 us trigger
void TriggerRead(int echoPin) {
     13a:	cf 93       	push	r28
     13c:	c8 2f       	mov	r28, r24
  delay(20);
     13e:	64 e1       	ldi	r22, 0x14	; 20
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 01 05 	call	0xa02	; 0xa02 <delay>
  pinMode(echoPin, OUTPUT);
     14a:	61 e0       	ldi	r22, 0x01	; 1
     14c:	8c 2f       	mov	r24, r28
     14e:	0e 94 a1 05 	call	0xb42	; 0xb42 <pinMode>
  digitalWrite(echoPin, LOW);  // Added this line
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	8c 2f       	mov	r24, r28
     156:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <digitalWrite>
  delayMicroseconds(10); // Added this line
     15a:	8a e0       	ldi	r24, 0x0A	; 10
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delayMicroseconds>
  digitalWrite(echoPin, HIGH);
     162:	61 e0       	ldi	r22, 0x01	; 1
     164:	8c 2f       	mov	r24, r28
     166:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <digitalWrite>
  delayMicroseconds(20); // Added this line
     16a:	84 e1       	ldi	r24, 0x14	; 20
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delayMicroseconds>
  digitalWrite(echoPin, LOW);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	8c 2f       	mov	r24, r28
     176:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <digitalWrite>
}
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <_Z10PulseWidthi>:

// after the trigger is sent the program waits for a pulse, and using interrupts and a counter within the arduino librarfy it measures the length 
// of the pulse 
long PulseWidth(int echoPin) {
     17e:	cf 93       	push	r28
     180:	c8 2f       	mov	r28, r24
  long duration, distance;
  TriggerRead(echoPin);
     182:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z11TriggerReadi>
  pinMode(echoPin, INPUT);
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	8c 2f       	mov	r24, r28
     18a:	0e 94 a1 05 	call	0xb42	; 0xb42 <pinMode>
  duration = pulseIn(echoPin, HIGH);
     18e:	20 e4       	ldi	r18, 0x40	; 64
     190:	32 e4       	ldi	r19, 0x42	; 66
     192:	4f e0       	ldi	r20, 0x0F	; 15
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	61 e0       	ldi	r22, 0x01	; 1
     198:	8c 2f       	mov	r24, r28
     19a:	0e 94 11 06 	call	0xc22	; 0xc22 <pulseIn>
    // The speed of sound is 340 m/s or 29 microseconds per centimeter.
    // The ping travels out and back, so to find the distance of the
    // object we take half of the distance travelled.
  // Hence, Distance = (0.5*Duration)/29.1
  
  distance = (duration / 2) / 29.4;
     19e:	99 23       	and	r25, r25
     1a0:	24 f4       	brge	.+8      	; 0x1aa <_Z10PulseWidthi+0x2c>
     1a2:	6f 5f       	subi	r22, 0xFF	; 255
     1a4:	7f 4f       	sbci	r23, 0xFF	; 255
     1a6:	8f 4f       	sbci	r24, 0xFF	; 255
     1a8:	9f 4f       	sbci	r25, 0xFF	; 255
     1aa:	95 95       	asr	r25
     1ac:	87 95       	ror	r24
     1ae:	77 95       	ror	r23
     1b0:	67 95       	ror	r22
     1b2:	0e 94 7a 07 	call	0xef4	; 0xef4 <__floatsisf>
     1b6:	23 e3       	ldi	r18, 0x33	; 51
     1b8:	33 e3       	ldi	r19, 0x33	; 51
     1ba:	4b ee       	ldi	r20, 0xEB	; 235
     1bc:	51 e4       	ldi	r21, 0x41	; 65
     1be:	0e 94 d0 06 	call	0xda0	; 0xda0 <__divsf3>
     1c2:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixsfsi>
  return distance;
}
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <loop>:
void setup() {
  pinMode(Motor, OUTPUT); // Declare the LED as an output pin
  digitalWrite(Motor, LOW); //Declare the LED to be LOW initially
}

void loop() { 
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
// The continuous while loop continuously hears for the outputs from the sensors 1,2,3, and adjusts the conditional statements
// to avoid random errors which often is caused by random jitters. So we avoid very low values and ignore them.
// If either of the three sensors senses objects it turns on the motors to alert the user.	


	if((PulseWidth(echo2) < constantDistance_2) || (PulseWidth(echo3) < constantDistance_3)){
     1ce:	80 91 08 01 	lds	r24, 0x0108
     1d2:	90 91 09 01 	lds	r25, 0x0109
     1d6:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z10PulseWidthi>
     1da:	20 91 02 01 	lds	r18, 0x0102
     1de:	30 91 03 01 	lds	r19, 0x0103
     1e2:	89 01       	movw	r16, r18
     1e4:	33 0f       	add	r19, r19
     1e6:	22 0b       	sbc	r18, r18
     1e8:	33 0b       	sbc	r19, r19
     1ea:	60 17       	cp	r22, r16
     1ec:	71 07       	cpc	r23, r17
     1ee:	82 07       	cpc	r24, r18
     1f0:	93 07       	cpc	r25, r19
     1f2:	9c f0       	brlt	.+38     	; 0x21a <loop+0x50>
     1f4:	80 91 06 01 	lds	r24, 0x0106
     1f8:	90 91 07 01 	lds	r25, 0x0107
     1fc:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z10PulseWidthi>
     200:	20 91 00 01 	lds	r18, 0x0100
     204:	30 91 01 01 	lds	r19, 0x0101
     208:	89 01       	movw	r16, r18
     20a:	33 0f       	add	r19, r19
     20c:	22 0b       	sbc	r18, r18
     20e:	33 0b       	sbc	r19, r19
     210:	60 17       	cp	r22, r16
     212:	71 07       	cpc	r23, r17
     214:	82 07       	cpc	r24, r18
     216:	93 07       	cpc	r25, r19
     218:	34 f4       	brge	.+12     	; 0x226 <loop+0x5c>
		digitalWrite(Motor, HIGH); // Turn on the motor if they fall within range
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	80 91 04 01 	lds	r24, 0x0104
     220:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <digitalWrite>
     224:	05 c0       	rjmp	.+10     	; 0x230 <loop+0x66>
		}
	else {
		digitalWrite(Motor, LOW); //  Turn it off if it is not within range
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	80 91 04 01 	lds	r24, 0x0104
     22c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <digitalWrite>
	}
}
     230:	1f 91       	pop	r17
     232:	0f 91       	pop	r16
     234:	08 95       	ret

00000236 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     236:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     238:	91 8d       	ldd	r25, Z+25	; 0x19
     23a:	22 8d       	ldd	r18, Z+26	; 0x1a
     23c:	89 2f       	mov	r24, r25
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	80 5c       	subi	r24, 0xC0	; 192
     242:	9f 4f       	sbci	r25, 0xFF	; 255
     244:	82 1b       	sub	r24, r18
     246:	91 09       	sbc	r25, r1
}
     248:	8f 73       	andi	r24, 0x3F	; 63
     24a:	99 27       	eor	r25, r25
     24c:	08 95       	ret

0000024e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     24e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     250:	91 8d       	ldd	r25, Z+25	; 0x19
     252:	82 8d       	ldd	r24, Z+26	; 0x1a
     254:	98 17       	cp	r25, r24
     256:	31 f0       	breq	.+12     	; 0x264 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     258:	82 8d       	ldd	r24, Z+26	; 0x1a
     25a:	e8 0f       	add	r30, r24
     25c:	f1 1d       	adc	r31, r1
     25e:	85 8d       	ldd	r24, Z+29	; 0x1d
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     268:	08 95       	ret

0000026a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     26a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     26c:	91 8d       	ldd	r25, Z+25	; 0x19
     26e:	82 8d       	ldd	r24, Z+26	; 0x1a
     270:	98 17       	cp	r25, r24
     272:	61 f0       	breq	.+24     	; 0x28c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     274:	82 8d       	ldd	r24, Z+26	; 0x1a
     276:	df 01       	movw	r26, r30
     278:	a8 0f       	add	r26, r24
     27a:	b1 1d       	adc	r27, r1
     27c:	5d 96       	adiw	r26, 0x1d	; 29
     27e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     280:	92 8d       	ldd	r25, Z+26	; 0x1a
     282:	9f 5f       	subi	r25, 0xFF	; 255
     284:	9f 73       	andi	r25, 0x3F	; 63
     286:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     290:	08 95       	ret

00000292 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     292:	80 e5       	ldi	r24, 0x50	; 80
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	89 2b       	or	r24, r25
     298:	49 f0       	breq	.+18     	; 0x2ac <_Z14serialEventRunv+0x1a>
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	89 2b       	or	r24, r25
     2a0:	29 f0       	breq	.+10     	; 0x2ac <_Z14serialEventRunv+0x1a>
     2a2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_Z17Serial0_availablev>
     2a6:	81 11       	cpse	r24, r1
     2a8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2ac:	08 95       	ret

000002ae <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     2ae:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     2b0:	84 8d       	ldd	r24, Z+28	; 0x1c
     2b2:	df 01       	movw	r26, r30
     2b4:	a8 0f       	add	r26, r24
     2b6:	b1 1d       	adc	r27, r1
     2b8:	a3 5a       	subi	r26, 0xA3	; 163
     2ba:	bf 4f       	sbci	r27, 0xFF	; 255
     2bc:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     2be:	24 8d       	ldd	r18, Z+28	; 0x1c
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	2f 5f       	subi	r18, 0xFF	; 255
     2c4:	3f 4f       	sbci	r19, 0xFF	; 255
     2c6:	2f 73       	andi	r18, 0x3F	; 63
     2c8:	30 78       	andi	r19, 0x80	; 128
     2ca:	33 23       	and	r19, r19
     2cc:	34 f4       	brge	.+12     	; 0x2da <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	31 09       	sbc	r19, r1
     2d2:	20 6c       	ori	r18, 0xC0	; 192
     2d4:	3f 6f       	ori	r19, 0xFF	; 255
     2d6:	2f 5f       	subi	r18, 0xFF	; 255
     2d8:	3f 4f       	sbci	r19, 0xFF	; 255
     2da:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     2dc:	a6 89       	ldd	r26, Z+22	; 0x16
     2de:	b7 89       	ldd	r27, Z+23	; 0x17
     2e0:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     2e2:	a0 89       	ldd	r26, Z+16	; 0x10
     2e4:	b1 89       	ldd	r27, Z+17	; 0x11
     2e6:	8c 91       	ld	r24, X
     2e8:	80 64       	ori	r24, 0x40	; 64
     2ea:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     2ec:	93 8d       	ldd	r25, Z+27	; 0x1b
     2ee:	84 8d       	ldd	r24, Z+28	; 0x1c
     2f0:	98 13       	cpse	r25, r24
     2f2:	06 c0       	rjmp	.+12     	; 0x300 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     2f4:	02 88       	ldd	r0, Z+18	; 0x12
     2f6:	f3 89       	ldd	r31, Z+19	; 0x13
     2f8:	e0 2d       	mov	r30, r0
     2fa:	80 81       	ld	r24, Z
     2fc:	8f 7d       	andi	r24, 0xDF	; 223
     2fe:	80 83       	st	Z, r24
     300:	08 95       	ret

00000302 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     308:	88 8d       	ldd	r24, Y+24	; 0x18
     30a:	81 11       	cpse	r24, r1
     30c:	0f c0       	rjmp	.+30     	; 0x32c <_ZN14HardwareSerial5flushEv+0x2a>
     30e:	18 c0       	rjmp	.+48     	; 0x340 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	07 fc       	sbrc	r0, 7
     314:	0d c0       	rjmp	.+26     	; 0x330 <_ZN14HardwareSerial5flushEv+0x2e>
     316:	90 81       	ld	r25, Z
     318:	95 ff       	sbrs	r25, 5
     31a:	0a c0       	rjmp	.+20     	; 0x330 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     31c:	a8 89       	ldd	r26, Y+16	; 0x10
     31e:	b9 89       	ldd	r27, Y+17	; 0x11
     320:	8c 91       	ld	r24, X
     322:	85 ff       	sbrs	r24, 5
     324:	05 c0       	rjmp	.+10     	; 0x330 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     326:	ce 01       	movw	r24, r28
     328:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     32c:	ea 89       	ldd	r30, Y+18	; 0x12
     32e:	fb 89       	ldd	r31, Y+19	; 0x13
     330:	90 81       	ld	r25, Z
     332:	95 fd       	sbrc	r25, 5
     334:	ed cf       	rjmp	.-38     	; 0x310 <_ZN14HardwareSerial5flushEv+0xe>
     336:	a8 89       	ldd	r26, Y+16	; 0x10
     338:	b9 89       	ldd	r27, Y+17	; 0x11
     33a:	8c 91       	ld	r24, X
     33c:	86 ff       	sbrs	r24, 6
     33e:	e8 cf       	rjmp	.-48     	; 0x310 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	fc 01       	movw	r30, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     350:	93 8d       	ldd	r25, Z+27	; 0x1b
     352:	84 8d       	ldd	r24, Z+28	; 0x1c
     354:	98 13       	cpse	r25, r24
     356:	24 c0       	rjmp	.+72     	; 0x3a0 <_ZN14HardwareSerial5writeEh+0x5a>
     358:	a0 89       	ldd	r26, Z+16	; 0x10
     35a:	b1 89       	ldd	r27, Z+17	; 0x11
     35c:	8c 91       	ld	r24, X
     35e:	85 fd       	sbrc	r24, 5
     360:	31 c0       	rjmp	.+98     	; 0x3c4 <_ZN14HardwareSerial5writeEh+0x7e>
     362:	1e c0       	rjmp	.+60     	; 0x3a0 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	07 fc       	sbrc	r0, 7
     368:	08 c0       	rjmp	.+16     	; 0x37a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     36a:	e8 89       	ldd	r30, Y+16	; 0x10
     36c:	f9 89       	ldd	r31, Y+17	; 0x11
     36e:	80 81       	ld	r24, Z
     370:	85 ff       	sbrs	r24, 5
     372:	03 c0       	rjmp	.+6      	; 0x37a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     374:	ce 01       	movw	r24, r28
     376:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     37a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     37c:	09 17       	cp	r16, r25
     37e:	91 f3       	breq	.-28     	; 0x364 <_ZN14HardwareSerial5writeEh+0x1e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     380:	8b 8d       	ldd	r24, Y+27	; 0x1b
     382:	fe 01       	movw	r30, r28
     384:	e8 0f       	add	r30, r24
     386:	f1 1d       	adc	r31, r1
     388:	e3 5a       	subi	r30, 0xA3	; 163
     38a:	ff 4f       	sbci	r31, 0xFF	; 255
     38c:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     38e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     390:	ea 89       	ldd	r30, Y+18	; 0x12
     392:	fb 89       	ldd	r31, Y+19	; 0x13
     394:	80 81       	ld	r24, Z
     396:	80 62       	ori	r24, 0x20	; 32
     398:	80 83       	st	Z, r24
  _written = true;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
     39e:	1b c0       	rjmp	.+54     	; 0x3d6 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     3a0:	23 8d       	ldd	r18, Z+27	; 0x1b
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	2f 5f       	subi	r18, 0xFF	; 255
     3a6:	3f 4f       	sbci	r19, 0xFF	; 255
     3a8:	2f 73       	andi	r18, 0x3F	; 63
     3aa:	30 78       	andi	r19, 0x80	; 128
     3ac:	33 23       	and	r19, r19
     3ae:	34 f4       	brge	.+12     	; 0x3bc <_ZN14HardwareSerial5writeEh+0x76>
     3b0:	21 50       	subi	r18, 0x01	; 1
     3b2:	31 09       	sbc	r19, r1
     3b4:	20 6c       	ori	r18, 0xC0	; 192
     3b6:	3f 6f       	ori	r19, 0xFF	; 255
     3b8:	2f 5f       	subi	r18, 0xFF	; 255
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255
     3bc:	16 2f       	mov	r17, r22
     3be:	ef 01       	movw	r28, r30
     3c0:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     3c2:	db cf       	rjmp	.-74     	; 0x37a <_ZN14HardwareSerial5writeEh+0x34>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     3c4:	a6 89       	ldd	r26, Z+22	; 0x16
     3c6:	b7 89       	ldd	r27, Z+23	; 0x17
     3c8:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     3ca:	00 88       	ldd	r0, Z+16	; 0x10
     3cc:	f1 89       	ldd	r31, Z+17	; 0x11
     3ce:	e0 2d       	mov	r30, r0
     3d0:	80 81       	ld	r24, Z
     3d2:	80 64       	ori	r24, 0x40	; 64
     3d4:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	08 95       	ret

000003e4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	2f 93       	push	r18
     3f0:	8f 93       	push	r24
     3f2:	9f 93       	push	r25
     3f4:	af 93       	push	r26
     3f6:	bf 93       	push	r27
     3f8:	ef 93       	push	r30
     3fa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3fc:	e0 91 32 01 	lds	r30, 0x0132
     400:	f0 91 33 01 	lds	r31, 0x0133
     404:	80 81       	ld	r24, Z
     406:	82 fd       	sbrc	r24, 2
     408:	14 c0       	rjmp	.+40     	; 0x432 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     40a:	e2 e2       	ldi	r30, 0x22	; 34
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	a6 89       	ldd	r26, Z+22	; 0x16
     410:	b7 89       	ldd	r27, Z+23	; 0x17
     412:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     414:	81 8d       	ldd	r24, Z+25	; 0x19
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     41a:	92 8d       	ldd	r25, Z+26	; 0x1a
     41c:	89 17       	cp	r24, r25
     41e:	71 f0       	breq	.+28     	; 0x43c <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     420:	df 01       	movw	r26, r30
     422:	e1 8d       	ldd	r30, Z+25	; 0x19
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	ee 5d       	subi	r30, 0xDE	; 222
     428:	fe 4f       	sbci	r31, 0xFE	; 254
     42a:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     42c:	59 96       	adiw	r26, 0x19	; 25
     42e:	8c 93       	st	X, r24
     430:	05 c0       	rjmp	.+10     	; 0x43c <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     432:	e0 91 38 01 	lds	r30, 0x0138
     436:	f0 91 39 01 	lds	r31, 0x0139
     43a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	2f 91       	pop	r18
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	2f 93       	push	r18
     460:	3f 93       	push	r19
     462:	4f 93       	push	r20
     464:	5f 93       	push	r21
     466:	6f 93       	push	r22
     468:	7f 93       	push	r23
     46a:	8f 93       	push	r24
     46c:	9f 93       	push	r25
     46e:	af 93       	push	r26
     470:	bf 93       	push	r27
     472:	ef 93       	push	r30
     474:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     476:	82 e2       	ldi	r24, 0x22	; 34
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     47e:	ff 91       	pop	r31
     480:	ef 91       	pop	r30
     482:	bf 91       	pop	r27
     484:	af 91       	pop	r26
     486:	9f 91       	pop	r25
     488:	8f 91       	pop	r24
     48a:	7f 91       	pop	r23
     48c:	6f 91       	pop	r22
     48e:	5f 91       	pop	r21
     490:	4f 91       	pop	r20
     492:	3f 91       	pop	r19
     494:	2f 91       	pop	r18
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     4a0:	82 e2       	ldi	r24, 0x22	; 34
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 1b 01 	call	0x236	; 0x236 <_ZN14HardwareSerial9availableEv>
     4a8:	21 e0       	ldi	r18, 0x01	; 1
     4aa:	89 2b       	or	r24, r25
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <_Z17Serial0_availablev+0x10>
     4ae:	20 e0       	ldi	r18, 0x00	; 0
}
     4b0:	82 2f       	mov	r24, r18
     4b2:	08 95       	ret

000004b4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4b4:	e2 e2       	ldi	r30, 0x22	; 34
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	13 82       	std	Z+3, r1	; 0x03
     4ba:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     4bc:	88 ee       	ldi	r24, 0xE8	; 232
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	a0 e0       	ldi	r26, 0x00	; 0
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	84 83       	std	Z+4, r24	; 0x04
     4c6:	95 83       	std	Z+5, r25	; 0x05
     4c8:	a6 83       	std	Z+6, r26	; 0x06
     4ca:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     4cc:	8f e0       	ldi	r24, 0x0F	; 15
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	91 83       	std	Z+1, r25	; 0x01
     4d2:	80 83       	st	Z, r24
     4d4:	85 ec       	ldi	r24, 0xC5	; 197
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	95 87       	std	Z+13, r25	; 0x0d
     4da:	84 87       	std	Z+12, r24	; 0x0c
     4dc:	84 ec       	ldi	r24, 0xC4	; 196
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	97 87       	std	Z+15, r25	; 0x0f
     4e2:	86 87       	std	Z+14, r24	; 0x0e
     4e4:	80 ec       	ldi	r24, 0xC0	; 192
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	91 8b       	std	Z+17, r25	; 0x11
     4ea:	80 8b       	std	Z+16, r24	; 0x10
     4ec:	81 ec       	ldi	r24, 0xC1	; 193
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	93 8b       	std	Z+19, r25	; 0x13
     4f2:	82 8b       	std	Z+18, r24	; 0x12
     4f4:	82 ec       	ldi	r24, 0xC2	; 194
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	95 8b       	std	Z+21, r25	; 0x15
     4fa:	84 8b       	std	Z+20, r24	; 0x14
     4fc:	86 ec       	ldi	r24, 0xC6	; 198
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	97 8b       	std	Z+23, r25	; 0x17
     502:	86 8b       	std	Z+22, r24	; 0x16
     504:	11 8e       	std	Z+25, r1	; 0x19
     506:	12 8e       	std	Z+26, r1	; 0x1a
     508:	13 8e       	std	Z+27, r1	; 0x1b
     50a:	14 8e       	std	Z+28, r1	; 0x1c
     50c:	08 95       	ret

0000050e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     50e:	08 95       	ret

00000510 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     510:	8f 92       	push	r8
     512:	9f 92       	push	r9
     514:	af 92       	push	r10
     516:	bf 92       	push	r11
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	5c 01       	movw	r10, r24
     52a:	7b 01       	movw	r14, r22
     52c:	4c 01       	movw	r8, r24
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	88 0e       	add	r8, r24
     532:	91 1c       	adc	r9, r1
     534:	65 01       	movw	r12, r10
     536:	e5 e0       	ldi	r30, 0x05	; 5
     538:	ce 0e       	add	r12, r30
     53a:	d1 1c       	adc	r13, r1
    size_t n = 0;
     53c:	00 e0       	ldi	r16, 0x00	; 0
     53e:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     540:	f4 01       	movw	r30, r8
     542:	61 91       	ld	r22, Z+
     544:	4f 01       	movw	r8, r30
     546:	4a e0       	ldi	r20, 0x0A	; 10
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	c7 01       	movw	r24, r14
     54c:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN5Print5printEhi>
     550:	ec 01       	movw	r28, r24
        n += p.print('.');
     552:	6e e2       	ldi	r22, 0x2E	; 46
     554:	c7 01       	movw	r24, r14
     556:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Print5printEc>
     55a:	8c 0f       	add	r24, r28
     55c:	9d 1f       	adc	r25, r29
     55e:	08 0f       	add	r16, r24
     560:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     562:	8c 14       	cp	r8, r12
     564:	9d 04       	cpc	r9, r13
     566:	61 f7       	brne	.-40     	; 0x540 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     568:	4a e0       	ldi	r20, 0x0A	; 10
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	f5 01       	movw	r30, r10
     56e:	65 81       	ldd	r22, Z+5	; 0x05
     570:	c7 01       	movw	r24, r14
     572:	0e 94 9c 03 	call	0x738	; 0x738 <_ZN5Print5printEhi>
    return n;
}
     576:	80 0f       	add	r24, r16
     578:	91 1f       	adc	r25, r17
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	9f 90       	pop	r9
     590:	8f 90       	pop	r8
     592:	08 95       	ret

00000594 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     594:	ef eb       	ldi	r30, 0xBF	; 191
     596:	f1 e0       	ldi	r31, 0x01	; 1
     598:	8f e1       	ldi	r24, 0x1F	; 31
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	91 83       	std	Z+1, r25	; 0x01
     59e:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     5a0:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     5a2:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     5a4:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     5a6:	15 82       	std	Z+5, r1	; 0x05
     5a8:	08 95       	ret

000005aa <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     5aa:	08 95       	ret

000005ac <main>:

int main(void)
{
	init();
     5ac:	0e 94 37 05 	call	0xa6e	; 0xa6e <init>

	initVariant();
     5b0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     5b4:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     5b8:	c9 e4       	ldi	r28, 0x49	; 73
     5ba:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     5bc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <loop>
		if (serialEventRun) serialEventRun();
     5c0:	20 97       	sbiw	r28, 0x00	; 0
     5c2:	e1 f3       	breq	.-8      	; 0x5bc <main+0x10>
     5c4:	0e 94 49 01 	call	0x292	; 0x292 <_Z14serialEventRunv>
     5c8:	f9 cf       	rjmp	.-14     	; 0x5bc <main+0x10>

000005ca <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     5da:	41 15       	cp	r20, r1
     5dc:	51 05       	cpc	r21, r1
     5de:	b1 f0       	breq	.+44     	; 0x60c <_ZN5Print5writeEPKhj+0x42>
     5e0:	8c 01       	movw	r16, r24
     5e2:	e6 2e       	mov	r14, r22
     5e4:	f7 2e       	mov	r15, r23
     5e6:	ea 01       	movw	r28, r20
     5e8:	c1 2c       	mov	r12, r1
     5ea:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
     5ec:	d7 01       	movw	r26, r14
     5ee:	6d 91       	ld	r22, X+
     5f0:	7d 01       	movw	r14, r26
     5f2:	d8 01       	movw	r26, r16
     5f4:	ed 91       	ld	r30, X+
     5f6:	fc 91       	ld	r31, X
     5f8:	01 90       	ld	r0, Z+
     5fa:	f0 81       	ld	r31, Z
     5fc:	e0 2d       	mov	r30, r0
     5fe:	c8 01       	movw	r24, r16
     600:	09 95       	icall
     602:	c8 0e       	add	r12, r24
     604:	d9 1e       	adc	r13, r25
     606:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     608:	89 f7       	brne	.-30     	; 0x5ec <_ZN5Print5writeEPKhj+0x22>
     60a:	02 c0       	rjmp	.+4      	; 0x610 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     60c:	c1 2c       	mov	r12, r1
     60e:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
     610:	c6 01       	movw	r24, r12
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	08 95       	ret

00000624 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     624:	dc 01       	movw	r26, r24
     626:	ed 91       	ld	r30, X+
     628:	fc 91       	ld	r31, X
     62a:	01 90       	ld	r0, Z+
     62c:	f0 81       	ld	r31, Z
     62e:	e0 2d       	mov	r30, r0
     630:	09 95       	icall
}
     632:	08 95       	ret

00000634 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     634:	4f 92       	push	r4
     636:	5f 92       	push	r5
     638:	6f 92       	push	r6
     63a:	7f 92       	push	r7
     63c:	9f 92       	push	r9
     63e:	af 92       	push	r10
     640:	bf 92       	push	r11
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	a1 97       	sbiw	r28, 0x21	; 33
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	5c 01       	movw	r10, r24
     664:	6a 01       	movw	r12, r20
     666:	7b 01       	movw	r14, r22
     668:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     66a:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	82 17       	cp	r24, r18
     670:	20 f0       	brcs	.+8      	; 0x67a <_ZN5Print11printNumberEmh+0x46>
     672:	0f 2e       	mov	r0, r31
     674:	fa e0       	ldi	r31, 0x0A	; 10
     676:	9f 2e       	mov	r9, r31
     678:	f0 2d       	mov	r31, r0
     67a:	8e 01       	movw	r16, r28
     67c:	0f 5d       	subi	r16, 0xDF	; 223
     67e:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     680:	49 2c       	mov	r4, r9
     682:	51 2c       	mov	r5, r1
     684:	61 2c       	mov	r6, r1
     686:	71 2c       	mov	r7, r1
     688:	c7 01       	movw	r24, r14
     68a:	b6 01       	movw	r22, r12
     68c:	a3 01       	movw	r20, r6
     68e:	92 01       	movw	r18, r4
     690:	0e 94 06 08 	call	0x100c	; 0x100c <__udivmodsi4>
    char c = m - base * n;
     694:	8c 2d       	mov	r24, r12
     696:	92 9e       	mul	r9, r18
     698:	80 19       	sub	r24, r0
     69a:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     69c:	01 50       	subi	r16, 0x01	; 1
     69e:	11 09       	sbc	r17, r1
     6a0:	8a 30       	cpi	r24, 0x0A	; 10
     6a2:	10 f4       	brcc	.+4      	; 0x6a8 <_ZN5Print11printNumberEmh+0x74>
     6a4:	80 5d       	subi	r24, 0xD0	; 208
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <_ZN5Print11printNumberEmh+0x76>
     6a8:	89 5c       	subi	r24, 0xC9	; 201
     6aa:	d8 01       	movw	r26, r16
     6ac:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     6ae:	c2 2e       	mov	r12, r18
     6b0:	d3 2e       	mov	r13, r19
     6b2:	e4 2e       	mov	r14, r20
     6b4:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     6b6:	c1 14       	cp	r12, r1
     6b8:	d1 04       	cpc	r13, r1
     6ba:	e1 04       	cpc	r14, r1
     6bc:	f1 04       	cpc	r15, r1
     6be:	21 f7       	brne	.-56     	; 0x688 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     6c0:	01 15       	cp	r16, r1
     6c2:	11 05       	cpc	r17, r1
     6c4:	91 f0       	breq	.+36     	; 0x6ea <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
     6c6:	f8 01       	movw	r30, r16
     6c8:	01 90       	ld	r0, Z+
     6ca:	00 20       	and	r0, r0
     6cc:	e9 f7       	brne	.-6      	; 0x6c8 <_ZN5Print11printNumberEmh+0x94>
     6ce:	31 97       	sbiw	r30, 0x01	; 1
     6d0:	af 01       	movw	r20, r30
     6d2:	40 1b       	sub	r20, r16
     6d4:	51 0b       	sbc	r21, r17
     6d6:	d5 01       	movw	r26, r10
     6d8:	ed 91       	ld	r30, X+
     6da:	fc 91       	ld	r31, X
     6dc:	02 80       	ldd	r0, Z+2	; 0x02
     6de:	f3 81       	ldd	r31, Z+3	; 0x03
     6e0:	e0 2d       	mov	r30, r0
     6e2:	b8 01       	movw	r22, r16
     6e4:	c5 01       	movw	r24, r10
     6e6:	09 95       	icall
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
     6ee:	a1 96       	adiw	r28, 0x21	; 33
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	bf 90       	pop	r11
     70c:	af 90       	pop	r10
     70e:	9f 90       	pop	r9
     710:	7f 90       	pop	r7
     712:	6f 90       	pop	r6
     714:	5f 90       	pop	r5
     716:	4f 90       	pop	r4
     718:	08 95       	ret

0000071a <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     71a:	21 15       	cp	r18, r1
     71c:	31 05       	cpc	r19, r1
     71e:	49 f4       	brne	.+18     	; 0x732 <_ZN5Print5printEmi+0x18>
     720:	dc 01       	movw	r26, r24
     722:	ed 91       	ld	r30, X+
     724:	fc 91       	ld	r31, X
     726:	01 90       	ld	r0, Z+
     728:	f0 81       	ld	r31, Z
     72a:	e0 2d       	mov	r30, r0
     72c:	64 2f       	mov	r22, r20
     72e:	09 95       	icall
     730:	08 95       	ret
  else return printNumber(n, base);
     732:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN5Print11printNumberEmh>
}
     736:	08 95       	ret

00000738 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     738:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     73a:	46 2f       	mov	r20, r22
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN5Print5printEmi>
}
     746:	08 95       	ret

00000748 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	39 f0       	breq	.+14     	; 0x75a <_Z12disableTimerh+0x12>
     74c:	18 f0       	brcs	.+6      	; 0x754 <_Z12disableTimerh+0xc>
     74e:	82 30       	cpi	r24, 0x02	; 2
     750:	51 f0       	breq	.+20     	; 0x766 <_Z12disableTimerh+0x1e>
     752:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     754:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     758:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     75a:	ef e6       	ldi	r30, 0x6F	; 111
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	8d 7f       	andi	r24, 0xFD	; 253
     762:	80 83       	st	Z, r24
      break;
     764:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     766:	e0 e7       	ldi	r30, 0x70	; 112
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	8d 7f       	andi	r24, 0xFD	; 253
     76e:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     776:	e1 eb       	ldi	r30, 0xB1	; 177
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	88 7f       	andi	r24, 0xF8	; 248
     77e:	84 60       	ori	r24, 0x04	; 4
     780:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     782:	10 92 b3 00 	sts	0x00B3, r1
     786:	08 95       	ret

00000788 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     788:	cf 93       	push	r28
     78a:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     78c:	80 91 0a 01 	lds	r24, 0x010A
     790:	8c 13       	cpse	r24, r28
     792:	08 c0       	rjmp	.+16     	; 0x7a4 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     794:	e8 e6       	ldi	r30, 0x68	; 104
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	e4 91       	lpm	r30, Z
     79a:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
     79c:	9f ef       	ldi	r25, 0xFF	; 255
     79e:	90 93 0a 01 	sts	0x010A, r25
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <_Z6noToneh+0x1e>
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
     7a6:	0e 94 a4 03 	call	0x748	; 0x748 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	8c 2f       	mov	r24, r28
     7ae:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <digitalWrite>
}
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     7d8:	80 91 c8 01 	lds	r24, 0x01C8
     7dc:	90 91 c9 01 	lds	r25, 0x01C9
     7e0:	a0 91 ca 01 	lds	r26, 0x01CA
     7e4:	b0 91 cb 01 	lds	r27, 0x01CB
     7e8:	89 2b       	or	r24, r25
     7ea:	8a 2b       	or	r24, r26
     7ec:	8b 2b       	or	r24, r27
     7ee:	51 f1       	breq	.+84     	; 0x844 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     7f0:	80 91 c5 01 	lds	r24, 0x01C5
     7f4:	e0 91 c6 01 	lds	r30, 0x01C6
     7f8:	f0 91 c7 01 	lds	r31, 0x01C7
     7fc:	90 81       	ld	r25, Z
     7fe:	89 27       	eor	r24, r25
     800:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     802:	80 91 c8 01 	lds	r24, 0x01C8
     806:	90 91 c9 01 	lds	r25, 0x01C9
     80a:	a0 91 ca 01 	lds	r26, 0x01CA
     80e:	b0 91 cb 01 	lds	r27, 0x01CB
     812:	18 16       	cp	r1, r24
     814:	19 06       	cpc	r1, r25
     816:	1a 06       	cpc	r1, r26
     818:	1b 06       	cpc	r1, r27
     81a:	c4 f4       	brge	.+48     	; 0x84c <__vector_7+0x96>
      timer2_toggle_count--;
     81c:	80 91 c8 01 	lds	r24, 0x01C8
     820:	90 91 c9 01 	lds	r25, 0x01C9
     824:	a0 91 ca 01 	lds	r26, 0x01CA
     828:	b0 91 cb 01 	lds	r27, 0x01CB
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	a1 09       	sbc	r26, r1
     830:	b1 09       	sbc	r27, r1
     832:	80 93 c8 01 	sts	0x01C8, r24
     836:	90 93 c9 01 	sts	0x01C9, r25
     83a:	a0 93 ca 01 	sts	0x01CA, r26
     83e:	b0 93 cb 01 	sts	0x01CB, r27
     842:	04 c0       	rjmp	.+8      	; 0x84c <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     844:	80 91 0a 01 	lds	r24, 0x010A
     848:	0e 94 c4 03 	call	0x788	; 0x788 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     84c:	ff 91       	pop	r31
     84e:	ef 91       	pop	r30
     850:	bf 91       	pop	r27
     852:	af 91       	pop	r26
     854:	9f 91       	pop	r25
     856:	8f 91       	pop	r24
     858:	7f 91       	pop	r23
     85a:	6f 91       	pop	r22
     85c:	5f 91       	pop	r21
     85e:	4f 91       	pop	r20
     860:	3f 91       	pop	r19
     862:	2f 91       	pop	r18
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     890:	80 91 cc 01 	lds	r24, 0x01CC
     894:	90 91 cd 01 	lds	r25, 0x01CD
     898:	89 2b       	or	r24, r25
     89a:	29 f0       	breq	.+10     	; 0x8a6 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     89c:	e0 91 cc 01 	lds	r30, 0x01CC
     8a0:	f0 91 cd 01 	lds	r31, 0x01CD
     8a4:	09 95       	icall
}
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	bf 91       	pop	r27
     8ac:	af 91       	pop	r26
     8ae:	9f 91       	pop	r25
     8b0:	8f 91       	pop	r24
     8b2:	7f 91       	pop	r23
     8b4:	6f 91       	pop	r22
     8b6:	5f 91       	pop	r21
     8b8:	4f 91       	pop	r20
     8ba:	3f 91       	pop	r19
     8bc:	2f 91       	pop	r18
     8be:	0f 90       	pop	r0
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	0f 90       	pop	r0
     8c4:	1f 90       	pop	r1
     8c6:	18 95       	reti

000008c8 <__vector_2>:

ISR(INT1_vect) {
     8c8:	1f 92       	push	r1
     8ca:	0f 92       	push	r0
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	0f 92       	push	r0
     8d0:	11 24       	eor	r1, r1
     8d2:	2f 93       	push	r18
     8d4:	3f 93       	push	r19
     8d6:	4f 93       	push	r20
     8d8:	5f 93       	push	r21
     8da:	6f 93       	push	r22
     8dc:	7f 93       	push	r23
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	af 93       	push	r26
     8e4:	bf 93       	push	r27
     8e6:	ef 93       	push	r30
     8e8:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     8ea:	80 91 ce 01 	lds	r24, 0x01CE
     8ee:	90 91 cf 01 	lds	r25, 0x01CF
     8f2:	89 2b       	or	r24, r25
     8f4:	29 f0       	breq	.+10     	; 0x900 <__stack+0x1>
    intFunc[EXTERNAL_INT_1]();
     8f6:	e0 91 ce 01 	lds	r30, 0x01CE
     8fa:	f0 91 cf 01 	lds	r31, 0x01CF
     8fe:	09 95       	icall
}
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	0f 90       	pop	r0
     91e:	1f 90       	pop	r1
     920:	18 95       	reti

00000922 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     938:	80 91 d1 01 	lds	r24, 0x01D1
     93c:	90 91 d2 01 	lds	r25, 0x01D2
     940:	a0 91 d3 01 	lds	r26, 0x01D3
     944:	b0 91 d4 01 	lds	r27, 0x01D4
	unsigned char f = timer0_fract;
     948:	30 91 d0 01 	lds	r19, 0x01D0

	m += MILLIS_INC;
	f += FRACT_INC;
     94c:	23 e0       	ldi	r18, 0x03	; 3
     94e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     950:	2d 37       	cpi	r18, 0x7D	; 125
     952:	20 f4       	brcc	.+8      	; 0x95c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	a1 1d       	adc	r26, r1
     958:	b1 1d       	adc	r27, r1
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     95c:	26 e8       	ldi	r18, 0x86	; 134
     95e:	23 0f       	add	r18, r19
		m += 1;
     960:	02 96       	adiw	r24, 0x02	; 2
     962:	a1 1d       	adc	r26, r1
     964:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     966:	20 93 d0 01 	sts	0x01D0, r18
	timer0_millis = m;
     96a:	80 93 d1 01 	sts	0x01D1, r24
     96e:	90 93 d2 01 	sts	0x01D2, r25
     972:	a0 93 d3 01 	sts	0x01D3, r26
     976:	b0 93 d4 01 	sts	0x01D4, r27
	timer0_overflow_count++;
     97a:	80 91 d5 01 	lds	r24, 0x01D5
     97e:	90 91 d6 01 	lds	r25, 0x01D6
     982:	a0 91 d7 01 	lds	r26, 0x01D7
     986:	b0 91 d8 01 	lds	r27, 0x01D8
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	a1 1d       	adc	r26, r1
     98e:	b1 1d       	adc	r27, r1
     990:	80 93 d5 01 	sts	0x01D5, r24
     994:	90 93 d6 01 	sts	0x01D6, r25
     998:	a0 93 d7 01 	sts	0x01D7, r26
     99c:	b0 93 d8 01 	sts	0x01D8, r27
}
     9a0:	bf 91       	pop	r27
     9a2:	af 91       	pop	r26
     9a4:	9f 91       	pop	r25
     9a6:	8f 91       	pop	r24
     9a8:	3f 91       	pop	r19
     9aa:	2f 91       	pop	r18
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     9b6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     9b8:	f8 94       	cli
	m = timer0_overflow_count;
     9ba:	80 91 d5 01 	lds	r24, 0x01D5
     9be:	90 91 d6 01 	lds	r25, 0x01D6
     9c2:	a0 91 d7 01 	lds	r26, 0x01D7
     9c6:	b0 91 d8 01 	lds	r27, 0x01D8
#if defined(TCNT0)
	t = TCNT0;
     9ca:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     9cc:	a8 9b       	sbis	0x15, 0	; 21
     9ce:	05 c0       	rjmp	.+10     	; 0x9da <micros+0x24>
     9d0:	2f 3f       	cpi	r18, 0xFF	; 255
     9d2:	19 f0       	breq	.+6      	; 0x9da <micros+0x24>
		m++;
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	a1 1d       	adc	r26, r1
     9d8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     9da:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     9dc:	ba 2f       	mov	r27, r26
     9de:	a9 2f       	mov	r26, r25
     9e0:	98 2f       	mov	r25, r24
     9e2:	88 27       	eor	r24, r24
     9e4:	82 0f       	add	r24, r18
     9e6:	91 1d       	adc	r25, r1
     9e8:	a1 1d       	adc	r26, r1
     9ea:	b1 1d       	adc	r27, r1
     9ec:	bc 01       	movw	r22, r24
     9ee:	cd 01       	movw	r24, r26
     9f0:	66 0f       	add	r22, r22
     9f2:	77 1f       	adc	r23, r23
     9f4:	88 1f       	adc	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	66 0f       	add	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	88 1f       	adc	r24, r24
     9fe:	99 1f       	adc	r25, r25
}
     a00:	08 95       	ret

00000a02 <delay>:

void delay(unsigned long ms)
{
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	6b 01       	movw	r12, r22
     a10:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     a12:	0e 94 db 04 	call	0x9b6	; 0x9b6 <micros>
     a16:	eb 01       	movw	r28, r22

	while (ms > 0) {
     a18:	c1 14       	cp	r12, r1
     a1a:	d1 04       	cpc	r13, r1
     a1c:	e1 04       	cpc	r14, r1
     a1e:	f1 04       	cpc	r15, r1
     a20:	a9 f0       	breq	.+42     	; 0xa4c <delay+0x4a>
		yield();
     a22:	0e 94 87 02 	call	0x50e	; 0x50e <yield>
		if (((uint16_t)micros() - start) >= 1000) {
     a26:	0e 94 db 04 	call	0x9b6	; 0x9b6 <micros>
     a2a:	6c 1b       	sub	r22, r28
     a2c:	7d 0b       	sbc	r23, r29
     a2e:	68 3e       	cpi	r22, 0xE8	; 232
     a30:	73 40       	sbci	r23, 0x03	; 3
     a32:	38 f0       	brcs	.+14     	; 0xa42 <delay+0x40>
			ms--;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	c8 1a       	sub	r12, r24
     a38:	d1 08       	sbc	r13, r1
     a3a:	e1 08       	sbc	r14, r1
     a3c:	f1 08       	sbc	r15, r1
			start += 1000;
     a3e:	c8 51       	subi	r28, 0x18	; 24
     a40:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     a42:	c1 14       	cp	r12, r1
     a44:	d1 04       	cpc	r13, r1
     a46:	e1 04       	cpc	r14, r1
     a48:	f1 04       	cpc	r15, r1
     a4a:	59 f7       	brne	.-42     	; 0xa22 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	39 f0       	breq	.+14     	; 0xa6c <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
     a66:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <delayMicroseconds+0xe>
     a6c:	08 95       	ret

00000a6e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     a6e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     a70:	84 b5       	in	r24, 0x24	; 36
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     a76:	84 b5       	in	r24, 0x24	; 36
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     a7c:	85 b5       	in	r24, 0x25	; 37
     a7e:	82 60       	ori	r24, 0x02	; 2
     a80:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     a82:	85 b5       	in	r24, 0x25	; 37
     a84:	81 60       	ori	r24, 0x01	; 1
     a86:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     a88:	ee e6       	ldi	r30, 0x6E	; 110
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	80 81       	ld	r24, Z
     a8e:	81 60       	ori	r24, 0x01	; 1
     a90:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     a92:	e1 e8       	ldi	r30, 0x81	; 129
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     a98:	80 81       	ld	r24, Z
     a9a:	82 60       	ori	r24, 0x02	; 2
     a9c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     a9e:	80 81       	ld	r24, Z
     aa0:	81 60       	ori	r24, 0x01	; 1
     aa2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     aa4:	e0 e8       	ldi	r30, 0x80	; 128
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     aae:	e1 eb       	ldi	r30, 0xB1	; 177
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	84 60       	ori	r24, 0x04	; 4
     ab6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ab8:	e0 eb       	ldi	r30, 0xB0	; 176
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     ac2:	ea e7       	ldi	r30, 0x7A	; 122
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	84 60       	ori	r24, 0x04	; 4
     aca:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     acc:	80 81       	ld	r24, Z
     ace:	82 60       	ori	r24, 0x02	; 2
     ad0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     ad2:	80 81       	ld	r24, Z
     ad4:	81 60       	ori	r24, 0x01	; 1
     ad6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     ad8:	80 81       	ld	r24, Z
     ada:	80 68       	ori	r24, 0x80	; 128
     adc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     ade:	10 92 c1 00 	sts	0x00C1, r1
     ae2:	08 95       	ret

00000ae4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     ae4:	83 30       	cpi	r24, 0x03	; 3
     ae6:	69 f0       	breq	.+26     	; 0xb02 <turnOffPWM+0x1e>
     ae8:	28 f4       	brcc	.+10     	; 0xaf4 <turnOffPWM+0x10>
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	b1 f0       	breq	.+44     	; 0xb1a <turnOffPWM+0x36>
     aee:	82 30       	cpi	r24, 0x02	; 2
     af0:	c1 f0       	breq	.+48     	; 0xb22 <turnOffPWM+0x3e>
     af2:	08 95       	ret
     af4:	87 30       	cpi	r24, 0x07	; 7
     af6:	c9 f0       	breq	.+50     	; 0xb2a <turnOffPWM+0x46>
     af8:	88 30       	cpi	r24, 0x08	; 8
     afa:	e9 f0       	breq	.+58     	; 0xb36 <turnOffPWM+0x52>
     afc:	84 30       	cpi	r24, 0x04	; 4
     afe:	01 f5       	brne	.+64     	; 0xb40 <turnOffPWM+0x5c>
     b00:	06 c0       	rjmp	.+12     	; 0xb0e <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b02:	e0 e8       	ldi	r30, 0x80	; 128
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	8f 77       	andi	r24, 0x7F	; 127
     b0a:	80 83       	st	Z, r24
     b0c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b0e:	e0 e8       	ldi	r30, 0x80	; 128
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	8f 7d       	andi	r24, 0xDF	; 223
     b16:	80 83       	st	Z, r24
     b18:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b1a:	84 b5       	in	r24, 0x24	; 36
     b1c:	8f 77       	andi	r24, 0x7F	; 127
     b1e:	84 bd       	out	0x24, r24	; 36
     b20:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b22:	84 b5       	in	r24, 0x24	; 36
     b24:	8f 7d       	andi	r24, 0xDF	; 223
     b26:	84 bd       	out	0x24, r24	; 36
     b28:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b2a:	e0 eb       	ldi	r30, 0xB0	; 176
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	8f 77       	andi	r24, 0x7F	; 127
     b32:	80 83       	st	Z, r24
     b34:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b36:	e0 eb       	ldi	r30, 0xB0	; 176
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	8f 7d       	andi	r24, 0xDF	; 223
     b3e:	80 83       	st	Z, r24
     b40:	08 95       	ret

00000b42 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	fc 01       	movw	r30, r24
     b4a:	e3 58       	subi	r30, 0x83	; 131
     b4c:	ff 4f       	sbci	r31, 0xFF	; 255
     b4e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b50:	fc 01       	movw	r30, r24
     b52:	ef 56       	subi	r30, 0x6F	; 111
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b58:	88 23       	and	r24, r24
     b5a:	79 f1       	breq	.+94     	; 0xbba <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	fc 01       	movw	r30, r24
     b64:	e7 54       	subi	r30, 0x47	; 71
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	a5 91       	lpm	r26, Z+
     b6a:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     b6c:	fc 01       	movw	r30, r24
     b6e:	e1 55       	subi	r30, 0x51	; 81
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	c5 91       	lpm	r28, Z+
     b74:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     b76:	61 11       	cpse	r22, r1
     b78:	0c c0       	rjmp	.+24     	; 0xb92 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     b7a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     b7c:	f8 94       	cli
		*reg &= ~bit;
     b7e:	8c 91       	ld	r24, X
     b80:	e2 2f       	mov	r30, r18
     b82:	e0 95       	com	r30
     b84:	8e 23       	and	r24, r30
     b86:	8c 93       	st	X, r24
		*out &= ~bit;
     b88:	28 81       	ld	r18, Y
     b8a:	e2 23       	and	r30, r18
     b8c:	e8 83       	st	Y, r30
		SREG = oldSREG;
     b8e:	9f bf       	out	0x3f, r25	; 63
     b90:	14 c0       	rjmp	.+40     	; 0xbba <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     b92:	62 30       	cpi	r22, 0x02	; 2
     b94:	61 f4       	brne	.+24     	; 0xbae <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     b96:	9f b7       	in	r25, 0x3f	; 63
                cli();
     b98:	f8 94       	cli
		*reg &= ~bit;
     b9a:	3c 91       	ld	r19, X
     b9c:	82 2f       	mov	r24, r18
     b9e:	80 95       	com	r24
     ba0:	83 23       	and	r24, r19
     ba2:	8c 93       	st	X, r24
		*out |= bit;
     ba4:	e8 81       	ld	r30, Y
     ba6:	e2 2b       	or	r30, r18
     ba8:	e8 83       	st	Y, r30
		SREG = oldSREG;
     baa:	9f bf       	out	0x3f, r25	; 63
     bac:	06 c0       	rjmp	.+12     	; 0xbba <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     bae:	8f b7       	in	r24, 0x3f	; 63
                cli();
     bb0:	f8 94       	cli
		*reg |= bit;
     bb2:	ec 91       	ld	r30, X
     bb4:	e2 2b       	or	r30, r18
     bb6:	ec 93       	st	X, r30
		SREG = oldSREG;
     bb8:	8f bf       	out	0x3f, r24	; 63
	}
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	f9 01       	movw	r30, r18
     bcc:	e7 59       	subi	r30, 0x97	; 151
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     bd2:	f9 01       	movw	r30, r18
     bd4:	e3 58       	subi	r30, 0x83	; 131
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     bda:	f9 01       	movw	r30, r18
     bdc:	ef 56       	subi	r30, 0x6F	; 111
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     be2:	cc 23       	and	r28, r28
     be4:	d1 f0       	breq	.+52     	; 0xc1a <digitalWrite+0x5a>
     be6:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     be8:	81 11       	cpse	r24, r1
     bea:	0e 94 72 05 	call	0xae4	; 0xae4 <turnOffPWM>

	out = portOutputRegister(port);
     bee:	ec 2f       	mov	r30, r28
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	e1 55       	subi	r30, 0x51	; 81
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	a5 91       	lpm	r26, Z+
     bfc:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     bfe:	8f b7       	in	r24, 0x3f	; 63
	cli();
     c00:	f8 94       	cli

	if (val == LOW) {
     c02:	d1 11       	cpse	r29, r1
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <digitalWrite+0x52>
		*out &= ~bit;
     c06:	9c 91       	ld	r25, X
     c08:	e1 2f       	mov	r30, r17
     c0a:	e0 95       	com	r30
     c0c:	e9 23       	and	r30, r25
     c0e:	ec 93       	st	X, r30
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <digitalWrite+0x58>
	} else {
		*out |= bit;
     c12:	ec 91       	ld	r30, X
     c14:	e1 2b       	or	r30, r17
     c16:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     c18:	8f bf       	out	0x3f, r24	; 63
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	08 95       	ret

00000c22 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
     c22:	8f 92       	push	r8
     c24:	9f 92       	push	r9
     c26:	af 92       	push	r10
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	fc 01       	movw	r30, r24
     c3e:	e3 58       	subi	r30, 0x83	; 131
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
     c44:	fc 01       	movw	r30, r24
     c46:	ef 56       	subi	r30, 0x6F	; 111
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	84 91       	lpm	r24, Z
	uint8_t stateMask = (state ? bit : 0);
     c4c:	66 23       	and	r22, r22
     c4e:	11 f0       	breq	.+4      	; 0xc54 <pulseIn+0x32>
     c50:	67 2f       	mov	r22, r23
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <pulseIn+0x34>
     c54:	60 e0       	ldi	r22, 0x00	; 0
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
     c56:	69 01       	movw	r12, r18
     c58:	7a 01       	movw	r14, r20
     c5a:	9f e0       	ldi	r25, 0x0F	; 15
     c5c:	f9 22       	and	r15, r25
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     c5e:	48 2f       	mov	r20, r24
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	44 0f       	add	r20, r20
     c64:	55 1f       	adc	r21, r21
     c66:	4b 55       	subi	r20, 0x5B	; 91
     c68:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	dc 01       	movw	r26, r24
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     c70:	0e c0       	rjmp	.+28     	; 0xc8e <pulseIn+0x6c>
		if (numloops++ == maxloops)
     c72:	8c 01       	movw	r16, r24
     c74:	9d 01       	movw	r18, r26
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	2f 4f       	sbci	r18, 0xFF	; 255
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	8c 15       	cp	r24, r12
     c80:	9d 05       	cpc	r25, r13
     c82:	ae 05       	cpc	r26, r14
     c84:	bf 05       	cpc	r27, r15
     c86:	09 f4       	brne	.+2      	; 0xc8a <pulseIn+0x68>
     c88:	6f c0       	rjmp	.+222    	; 0xd68 <pulseIn+0x146>
     c8a:	d9 01       	movw	r26, r18
     c8c:	c8 01       	movw	r24, r16
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     c8e:	fa 01       	movw	r30, r20
     c90:	c5 91       	lpm	r28, Z+
     c92:	d4 91       	lpm	r29, Z
     c94:	38 81       	ld	r19, Y
     c96:	37 23       	and	r19, r23
     c98:	63 17       	cp	r22, r19
     c9a:	59 f3       	breq	.-42     	; 0xc72 <pulseIn+0x50>
     c9c:	0e c0       	rjmp	.+28     	; 0xcba <pulseIn+0x98>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
     c9e:	8c 01       	movw	r16, r24
     ca0:	9d 01       	movw	r18, r26
     ca2:	0f 5f       	subi	r16, 0xFF	; 255
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	2f 4f       	sbci	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	8c 15       	cp	r24, r12
     cac:	9d 05       	cpc	r25, r13
     cae:	ae 05       	cpc	r26, r14
     cb0:	bf 05       	cpc	r27, r15
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <pulseIn+0x94>
     cb4:	5d c0       	rjmp	.+186    	; 0xd70 <pulseIn+0x14e>
     cb6:	d9 01       	movw	r26, r18
     cb8:	c8 01       	movw	r24, r16
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
     cba:	fa 01       	movw	r30, r20
     cbc:	c5 91       	lpm	r28, Z+
     cbe:	d4 91       	lpm	r29, Z
     cc0:	38 81       	ld	r19, Y
     cc2:	37 23       	and	r19, r23
     cc4:	63 13       	cpse	r22, r19
     cc6:	eb cf       	rjmp	.-42     	; 0xc9e <pulseIn+0x7c>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     cc8:	fa 01       	movw	r30, r20
     cca:	c5 91       	lpm	r28, Z+
     ccc:	d4 91       	lpm	r29, Z
     cce:	28 81       	ld	r18, Y
     cd0:	27 23       	and	r18, r23
     cd2:	62 13       	cpse	r22, r18
     cd4:	22 c0       	rjmp	.+68     	; 0xd1a <pulseIn+0xf8>
		if (numloops++ == maxloops)
     cd6:	c8 16       	cp	r12, r24
     cd8:	d9 06       	cpc	r13, r25
     cda:	ea 06       	cpc	r14, r26
     cdc:	fb 06       	cpc	r15, r27
     cde:	09 f4       	brne	.+2      	; 0xce2 <pulseIn+0xc0>
     ce0:	4b c0       	rjmp	.+150    	; 0xd78 <pulseIn+0x156>
     ce2:	00 e0       	ldi	r16, 0x00	; 0
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	98 01       	movw	r18, r16
     ce8:	0c c0       	rjmp	.+24     	; 0xd02 <pulseIn+0xe0>
     cea:	4c 01       	movw	r8, r24
     cec:	5d 01       	movw	r10, r26
     cee:	80 0e       	add	r8, r16
     cf0:	91 1e       	adc	r9, r17
     cf2:	a2 1e       	adc	r10, r18
     cf4:	b3 1e       	adc	r11, r19
     cf6:	c8 14       	cp	r12, r8
     cf8:	d9 04       	cpc	r13, r9
     cfa:	ea 04       	cpc	r14, r10
     cfc:	fb 04       	cpc	r15, r11
     cfe:	09 f4       	brne	.+2      	; 0xd02 <pulseIn+0xe0>
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <pulseIn+0x15e>
			return 0;
		width++;
     d02:	0f 5f       	subi	r16, 0xFF	; 255
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	2f 4f       	sbci	r18, 0xFF	; 255
     d08:	3f 4f       	sbci	r19, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     d0a:	fa 01       	movw	r30, r20
     d0c:	c5 91       	lpm	r28, Z+
     d0e:	d4 91       	lpm	r29, Z
     d10:	e8 81       	ld	r30, Y
     d12:	e7 23       	and	r30, r23
     d14:	6e 17       	cp	r22, r30
     d16:	49 f3       	breq	.-46     	; 0xcea <pulseIn+0xc8>
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <pulseIn+0xfe>
     d1a:	00 e0       	ldi	r16, 0x00	; 0
     d1c:	10 e0       	ldi	r17, 0x00	; 0
     d1e:	98 01       	movw	r18, r16
	#warning "pulseIn() results may not be accurate"
	return clockCyclesToMicroseconds(width * 21 + 16);
#else
	// avr-gcc >4.3.x
	#warning "pulseIn() results may not be accurate"
	return clockCyclesToMicroseconds(width * 24 + 16);
     d20:	d9 01       	movw	r26, r18
     d22:	c8 01       	movw	r24, r16
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	aa 1f       	adc	r26, r26
     d2a:	bb 1f       	adc	r27, r27
     d2c:	80 0f       	add	r24, r16
     d2e:	91 1f       	adc	r25, r17
     d30:	a2 1f       	adc	r26, r18
     d32:	b3 1f       	adc	r27, r19
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	aa 1f       	adc	r26, r26
     d3a:	bb 1f       	adc	r27, r27
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	aa 1f       	adc	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	aa 1f       	adc	r26, r26
     d4a:	bb 1f       	adc	r27, r27
     d4c:	40 96       	adiw	r24, 0x10	; 16
     d4e:	a1 1d       	adc	r26, r1
     d50:	b1 1d       	adc	r27, r1
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	68 94       	set
     d58:	13 f8       	bld	r1, 3
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	77 95       	ror	r23
     d60:	67 95       	ror	r22
     d62:	16 94       	lsr	r1
     d64:	d1 f7       	brne	.-12     	; 0xd5a <pulseIn+0x138>
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <pulseIn+0x164>
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	cb 01       	movw	r24, r22
     d6e:	0b c0       	rjmp	.+22     	; 0xd86 <pulseIn+0x164>
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	cb 01       	movw	r24, r22
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <pulseIn+0x164>
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
			return 0;
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	cb 01       	movw	r24, r22
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <pulseIn+0x164>
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	cb 01       	movw	r24, r22
	// avr-gcc >4.3.x
	#warning "pulseIn() results may not be accurate"
	return clockCyclesToMicroseconds(width * 24 + 16);
#endif

}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	df 90       	pop	r13
     d94:	cf 90       	pop	r12
     d96:	bf 90       	pop	r11
     d98:	af 90       	pop	r10
     d9a:	9f 90       	pop	r9
     d9c:	8f 90       	pop	r8
     d9e:	08 95       	ret

00000da0 <__divsf3>:
     da0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divsf3x>
     da4:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_round>
     da8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_pscB>
     dac:	58 f0       	brcs	.+22     	; 0xdc4 <__divsf3+0x24>
     dae:	0e 94 be 07 	call	0xf7c	; 0xf7c <__fp_pscA>
     db2:	40 f0       	brcs	.+16     	; 0xdc4 <__divsf3+0x24>
     db4:	29 f4       	brne	.+10     	; 0xdc0 <__divsf3+0x20>
     db6:	5f 3f       	cpi	r21, 0xFF	; 255
     db8:	29 f0       	breq	.+10     	; 0xdc4 <__divsf3+0x24>
     dba:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_inf>
     dbe:	51 11       	cpse	r21, r1
     dc0:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_szero>
     dc4:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_nan>

00000dc8 <__divsf3x>:
     dc8:	0e 94 dd 07 	call	0xfba	; 0xfba <__fp_split3>
     dcc:	68 f3       	brcs	.-38     	; 0xda8 <__divsf3+0x8>

00000dce <__divsf3_pse>:
     dce:	99 23       	and	r25, r25
     dd0:	b1 f3       	breq	.-20     	; 0xdbe <__divsf3+0x1e>
     dd2:	55 23       	and	r21, r21
     dd4:	91 f3       	breq	.-28     	; 0xdba <__divsf3+0x1a>
     dd6:	95 1b       	sub	r25, r21
     dd8:	55 0b       	sbc	r21, r21
     dda:	bb 27       	eor	r27, r27
     ddc:	aa 27       	eor	r26, r26
     dde:	62 17       	cp	r22, r18
     de0:	73 07       	cpc	r23, r19
     de2:	84 07       	cpc	r24, r20
     de4:	38 f0       	brcs	.+14     	; 0xdf4 <__divsf3_pse+0x26>
     de6:	9f 5f       	subi	r25, 0xFF	; 255
     de8:	5f 4f       	sbci	r21, 0xFF	; 255
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	44 1f       	adc	r20, r20
     df0:	aa 1f       	adc	r26, r26
     df2:	a9 f3       	breq	.-22     	; 0xdde <__divsf3_pse+0x10>
     df4:	35 d0       	rcall	.+106    	; 0xe60 <__divsf3_pse+0x92>
     df6:	0e 2e       	mov	r0, r30
     df8:	3a f0       	brmi	.+14     	; 0xe08 <__divsf3_pse+0x3a>
     dfa:	e0 e8       	ldi	r30, 0x80	; 128
     dfc:	32 d0       	rcall	.+100    	; 0xe62 <__divsf3_pse+0x94>
     dfe:	91 50       	subi	r25, 0x01	; 1
     e00:	50 40       	sbci	r21, 0x00	; 0
     e02:	e6 95       	lsr	r30
     e04:	00 1c       	adc	r0, r0
     e06:	ca f7       	brpl	.-14     	; 0xdfa <__divsf3_pse+0x2c>
     e08:	2b d0       	rcall	.+86     	; 0xe60 <__divsf3_pse+0x92>
     e0a:	fe 2f       	mov	r31, r30
     e0c:	29 d0       	rcall	.+82     	; 0xe60 <__divsf3_pse+0x92>
     e0e:	66 0f       	add	r22, r22
     e10:	77 1f       	adc	r23, r23
     e12:	88 1f       	adc	r24, r24
     e14:	bb 1f       	adc	r27, r27
     e16:	26 17       	cp	r18, r22
     e18:	37 07       	cpc	r19, r23
     e1a:	48 07       	cpc	r20, r24
     e1c:	ab 07       	cpc	r26, r27
     e1e:	b0 e8       	ldi	r27, 0x80	; 128
     e20:	09 f0       	breq	.+2      	; 0xe24 <__divsf3_pse+0x56>
     e22:	bb 0b       	sbc	r27, r27
     e24:	80 2d       	mov	r24, r0
     e26:	bf 01       	movw	r22, r30
     e28:	ff 27       	eor	r31, r31
     e2a:	93 58       	subi	r25, 0x83	; 131
     e2c:	5f 4f       	sbci	r21, 0xFF	; 255
     e2e:	3a f0       	brmi	.+14     	; 0xe3e <__divsf3_pse+0x70>
     e30:	9e 3f       	cpi	r25, 0xFE	; 254
     e32:	51 05       	cpc	r21, r1
     e34:	78 f0       	brcs	.+30     	; 0xe54 <__divsf3_pse+0x86>
     e36:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_inf>
     e3a:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_szero>
     e3e:	5f 3f       	cpi	r21, 0xFF	; 255
     e40:	e4 f3       	brlt	.-8      	; 0xe3a <__divsf3_pse+0x6c>
     e42:	98 3e       	cpi	r25, 0xE8	; 232
     e44:	d4 f3       	brlt	.-12     	; 0xe3a <__divsf3_pse+0x6c>
     e46:	86 95       	lsr	r24
     e48:	77 95       	ror	r23
     e4a:	67 95       	ror	r22
     e4c:	b7 95       	ror	r27
     e4e:	f7 95       	ror	r31
     e50:	9f 5f       	subi	r25, 0xFF	; 255
     e52:	c9 f7       	brne	.-14     	; 0xe46 <__divsf3_pse+0x78>
     e54:	88 0f       	add	r24, r24
     e56:	91 1d       	adc	r25, r1
     e58:	96 95       	lsr	r25
     e5a:	87 95       	ror	r24
     e5c:	97 f9       	bld	r25, 7
     e5e:	08 95       	ret
     e60:	e1 e0       	ldi	r30, 0x01	; 1
     e62:	66 0f       	add	r22, r22
     e64:	77 1f       	adc	r23, r23
     e66:	88 1f       	adc	r24, r24
     e68:	bb 1f       	adc	r27, r27
     e6a:	62 17       	cp	r22, r18
     e6c:	73 07       	cpc	r23, r19
     e6e:	84 07       	cpc	r24, r20
     e70:	ba 07       	cpc	r27, r26
     e72:	20 f0       	brcs	.+8      	; 0xe7c <__divsf3_pse+0xae>
     e74:	62 1b       	sub	r22, r18
     e76:	73 0b       	sbc	r23, r19
     e78:	84 0b       	sbc	r24, r20
     e7a:	ba 0b       	sbc	r27, r26
     e7c:	ee 1f       	adc	r30, r30
     e7e:	88 f7       	brcc	.-30     	; 0xe62 <__divsf3_pse+0x94>
     e80:	e0 95       	com	r30
     e82:	08 95       	ret

00000e84 <__fixsfsi>:
     e84:	0e 94 49 07 	call	0xe92	; 0xe92 <__fixunssfsi>
     e88:	68 94       	set
     e8a:	b1 11       	cpse	r27, r1
     e8c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_szero>
     e90:	08 95       	ret

00000e92 <__fixunssfsi>:
     e92:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_splitA>
     e96:	88 f0       	brcs	.+34     	; 0xeba <__fixunssfsi+0x28>
     e98:	9f 57       	subi	r25, 0x7F	; 127
     e9a:	98 f0       	brcs	.+38     	; 0xec2 <__fixunssfsi+0x30>
     e9c:	b9 2f       	mov	r27, r25
     e9e:	99 27       	eor	r25, r25
     ea0:	b7 51       	subi	r27, 0x17	; 23
     ea2:	b0 f0       	brcs	.+44     	; 0xed0 <__fixunssfsi+0x3e>
     ea4:	e1 f0       	breq	.+56     	; 0xede <__fixunssfsi+0x4c>
     ea6:	66 0f       	add	r22, r22
     ea8:	77 1f       	adc	r23, r23
     eaa:	88 1f       	adc	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	1a f0       	brmi	.+6      	; 0xeb6 <__fixunssfsi+0x24>
     eb0:	ba 95       	dec	r27
     eb2:	c9 f7       	brne	.-14     	; 0xea6 <__fixunssfsi+0x14>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <__fixunssfsi+0x4c>
     eb6:	b1 30       	cpi	r27, 0x01	; 1
     eb8:	91 f0       	breq	.+36     	; 0xede <__fixunssfsi+0x4c>
     eba:	0e 94 ff 07 	call	0xffe	; 0xffe <__fp_zero>
     ebe:	b1 e0       	ldi	r27, 0x01	; 1
     ec0:	08 95       	ret
     ec2:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__fp_zero>
     ec6:	67 2f       	mov	r22, r23
     ec8:	78 2f       	mov	r23, r24
     eca:	88 27       	eor	r24, r24
     ecc:	b8 5f       	subi	r27, 0xF8	; 248
     ece:	39 f0       	breq	.+14     	; 0xede <__fixunssfsi+0x4c>
     ed0:	b9 3f       	cpi	r27, 0xF9	; 249
     ed2:	cc f3       	brlt	.-14     	; 0xec6 <__fixunssfsi+0x34>
     ed4:	86 95       	lsr	r24
     ed6:	77 95       	ror	r23
     ed8:	67 95       	ror	r22
     eda:	b3 95       	inc	r27
     edc:	d9 f7       	brne	.-10     	; 0xed4 <__fixunssfsi+0x42>
     ede:	3e f4       	brtc	.+14     	; 0xeee <__fixunssfsi+0x5c>
     ee0:	90 95       	com	r25
     ee2:	80 95       	com	r24
     ee4:	70 95       	com	r23
     ee6:	61 95       	neg	r22
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	8f 4f       	sbci	r24, 0xFF	; 255
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	08 95       	ret

00000ef0 <__floatunsisf>:
     ef0:	e8 94       	clt
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <__floatsisf+0x12>

00000ef4 <__floatsisf>:
     ef4:	97 fb       	bst	r25, 7
     ef6:	3e f4       	brtc	.+14     	; 0xf06 <__floatsisf+0x12>
     ef8:	90 95       	com	r25
     efa:	80 95       	com	r24
     efc:	70 95       	com	r23
     efe:	61 95       	neg	r22
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	8f 4f       	sbci	r24, 0xFF	; 255
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	99 23       	and	r25, r25
     f08:	a9 f0       	breq	.+42     	; 0xf34 <__floatsisf+0x40>
     f0a:	f9 2f       	mov	r31, r25
     f0c:	96 e9       	ldi	r25, 0x96	; 150
     f0e:	bb 27       	eor	r27, r27
     f10:	93 95       	inc	r25
     f12:	f6 95       	lsr	r31
     f14:	87 95       	ror	r24
     f16:	77 95       	ror	r23
     f18:	67 95       	ror	r22
     f1a:	b7 95       	ror	r27
     f1c:	f1 11       	cpse	r31, r1
     f1e:	f8 cf       	rjmp	.-16     	; 0xf10 <__floatsisf+0x1c>
     f20:	fa f4       	brpl	.+62     	; 0xf60 <__floatsisf+0x6c>
     f22:	bb 0f       	add	r27, r27
     f24:	11 f4       	brne	.+4      	; 0xf2a <__floatsisf+0x36>
     f26:	60 ff       	sbrs	r22, 0
     f28:	1b c0       	rjmp	.+54     	; 0xf60 <__floatsisf+0x6c>
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	8f 4f       	sbci	r24, 0xFF	; 255
     f30:	9f 4f       	sbci	r25, 0xFF	; 255
     f32:	16 c0       	rjmp	.+44     	; 0xf60 <__floatsisf+0x6c>
     f34:	88 23       	and	r24, r24
     f36:	11 f0       	breq	.+4      	; 0xf3c <__floatsisf+0x48>
     f38:	96 e9       	ldi	r25, 0x96	; 150
     f3a:	11 c0       	rjmp	.+34     	; 0xf5e <__floatsisf+0x6a>
     f3c:	77 23       	and	r23, r23
     f3e:	21 f0       	breq	.+8      	; 0xf48 <__floatsisf+0x54>
     f40:	9e e8       	ldi	r25, 0x8E	; 142
     f42:	87 2f       	mov	r24, r23
     f44:	76 2f       	mov	r23, r22
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <__floatsisf+0x5e>
     f48:	66 23       	and	r22, r22
     f4a:	71 f0       	breq	.+28     	; 0xf68 <__floatsisf+0x74>
     f4c:	96 e8       	ldi	r25, 0x86	; 134
     f4e:	86 2f       	mov	r24, r22
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	2a f0       	brmi	.+10     	; 0xf60 <__floatsisf+0x6c>
     f56:	9a 95       	dec	r25
     f58:	66 0f       	add	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	da f7       	brpl	.-10     	; 0xf56 <__floatsisf+0x62>
     f60:	88 0f       	add	r24, r24
     f62:	96 95       	lsr	r25
     f64:	87 95       	ror	r24
     f66:	97 f9       	bld	r25, 7
     f68:	08 95       	ret

00000f6a <__fp_inf>:
     f6a:	97 f9       	bld	r25, 7
     f6c:	9f 67       	ori	r25, 0x7F	; 127
     f6e:	80 e8       	ldi	r24, 0x80	; 128
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	08 95       	ret

00000f76 <__fp_nan>:
     f76:	9f ef       	ldi	r25, 0xFF	; 255
     f78:	80 ec       	ldi	r24, 0xC0	; 192
     f7a:	08 95       	ret

00000f7c <__fp_pscA>:
     f7c:	00 24       	eor	r0, r0
     f7e:	0a 94       	dec	r0
     f80:	16 16       	cp	r1, r22
     f82:	17 06       	cpc	r1, r23
     f84:	18 06       	cpc	r1, r24
     f86:	09 06       	cpc	r0, r25
     f88:	08 95       	ret

00000f8a <__fp_pscB>:
     f8a:	00 24       	eor	r0, r0
     f8c:	0a 94       	dec	r0
     f8e:	12 16       	cp	r1, r18
     f90:	13 06       	cpc	r1, r19
     f92:	14 06       	cpc	r1, r20
     f94:	05 06       	cpc	r0, r21
     f96:	08 95       	ret

00000f98 <__fp_round>:
     f98:	09 2e       	mov	r0, r25
     f9a:	03 94       	inc	r0
     f9c:	00 0c       	add	r0, r0
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__fp_round+0xc>
     fa0:	88 23       	and	r24, r24
     fa2:	52 f0       	brmi	.+20     	; 0xfb8 <__fp_round+0x20>
     fa4:	bb 0f       	add	r27, r27
     fa6:	40 f4       	brcc	.+16     	; 0xfb8 <__fp_round+0x20>
     fa8:	bf 2b       	or	r27, r31
     faa:	11 f4       	brne	.+4      	; 0xfb0 <__fp_round+0x18>
     fac:	60 ff       	sbrs	r22, 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <__fp_round+0x20>
     fb0:	6f 5f       	subi	r22, 0xFF	; 255
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	8f 4f       	sbci	r24, 0xFF	; 255
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	08 95       	ret

00000fba <__fp_split3>:
     fba:	57 fd       	sbrc	r21, 7
     fbc:	90 58       	subi	r25, 0x80	; 128
     fbe:	44 0f       	add	r20, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	59 f0       	breq	.+22     	; 0xfda <__fp_splitA+0x10>
     fc4:	5f 3f       	cpi	r21, 0xFF	; 255
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <__fp_splitA+0x1a>
     fc8:	47 95       	ror	r20

00000fca <__fp_splitA>:
     fca:	88 0f       	add	r24, r24
     fcc:	97 fb       	bst	r25, 7
     fce:	99 1f       	adc	r25, r25
     fd0:	61 f0       	breq	.+24     	; 0xfea <__fp_splitA+0x20>
     fd2:	9f 3f       	cpi	r25, 0xFF	; 255
     fd4:	79 f0       	breq	.+30     	; 0xff4 <__fp_splitA+0x2a>
     fd6:	87 95       	ror	r24
     fd8:	08 95       	ret
     fda:	12 16       	cp	r1, r18
     fdc:	13 06       	cpc	r1, r19
     fde:	14 06       	cpc	r1, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	f2 cf       	rjmp	.-28     	; 0xfc8 <__fp_split3+0xe>
     fe4:	46 95       	lsr	r20
     fe6:	f1 df       	rcall	.-30     	; 0xfca <__fp_splitA>
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <__fp_splitA+0x30>
     fea:	16 16       	cp	r1, r22
     fec:	17 06       	cpc	r1, r23
     fee:	18 06       	cpc	r1, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	f1 cf       	rjmp	.-30     	; 0xfd6 <__fp_splitA+0xc>
     ff4:	86 95       	lsr	r24
     ff6:	71 05       	cpc	r23, r1
     ff8:	61 05       	cpc	r22, r1
     ffa:	08 94       	sec
     ffc:	08 95       	ret

00000ffe <__fp_zero>:
     ffe:	e8 94       	clt

00001000 <__fp_szero>:
    1000:	bb 27       	eor	r27, r27
    1002:	66 27       	eor	r22, r22
    1004:	77 27       	eor	r23, r23
    1006:	cb 01       	movw	r24, r22
    1008:	97 f9       	bld	r25, 7
    100a:	08 95       	ret

0000100c <__udivmodsi4>:
    100c:	a1 e2       	ldi	r26, 0x21	; 33
    100e:	1a 2e       	mov	r1, r26
    1010:	aa 1b       	sub	r26, r26
    1012:	bb 1b       	sub	r27, r27
    1014:	fd 01       	movw	r30, r26
    1016:	0d c0       	rjmp	.+26     	; 0x1032 <__udivmodsi4_ep>

00001018 <__udivmodsi4_loop>:
    1018:	aa 1f       	adc	r26, r26
    101a:	bb 1f       	adc	r27, r27
    101c:	ee 1f       	adc	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	a2 17       	cp	r26, r18
    1022:	b3 07       	cpc	r27, r19
    1024:	e4 07       	cpc	r30, r20
    1026:	f5 07       	cpc	r31, r21
    1028:	20 f0       	brcs	.+8      	; 0x1032 <__udivmodsi4_ep>
    102a:	a2 1b       	sub	r26, r18
    102c:	b3 0b       	sbc	r27, r19
    102e:	e4 0b       	sbc	r30, r20
    1030:	f5 0b       	sbc	r31, r21

00001032 <__udivmodsi4_ep>:
    1032:	66 1f       	adc	r22, r22
    1034:	77 1f       	adc	r23, r23
    1036:	88 1f       	adc	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	1a 94       	dec	r1
    103c:	69 f7       	brne	.-38     	; 0x1018 <__udivmodsi4_loop>
    103e:	60 95       	com	r22
    1040:	70 95       	com	r23
    1042:	80 95       	com	r24
    1044:	90 95       	com	r25
    1046:	9b 01       	movw	r18, r22
    1048:	ac 01       	movw	r20, r24
    104a:	bd 01       	movw	r22, r26
    104c:	cf 01       	movw	r24, r30
    104e:	08 95       	ret

00001050 <__tablejump2__>:
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	05 90       	lpm	r0, Z+
    1056:	f4 91       	lpm	r31, Z
    1058:	e0 2d       	mov	r30, r0
    105a:	09 94       	ijmp

0000105c <_exit>:
    105c:	f8 94       	cli

0000105e <__stop_program>:
    105e:	ff cf       	rjmp	.-2      	; 0x105e <__stop_program>
